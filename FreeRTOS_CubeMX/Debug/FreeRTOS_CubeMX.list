
FreeRTOS_CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e64  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006034  08006034  00016034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006094  08006094  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006094  08006094  00016094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800609c  0800609c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800609c  0800609c  0001609c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060a0  080060a0  000160a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080060a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a84  20000010  080060b4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a94  080060b4  00024a94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019137  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f75  00000000  00000000  00039177  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001450  00000000  00000000  0003c0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012f8  00000000  00000000  0003d540  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023ad3  00000000  00000000  0003e838  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fa28  00000000  00000000  0006230b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000da98b  00000000  00000000  00071d33  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c6be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055c4  00000000  00000000  0014c73c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800601c 	.word	0x0800601c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800601c 	.word	0x0800601c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <HAL_Init+0x40>)
 800051a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800051e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <HAL_Init+0x40>)
 8000526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <HAL_Init+0x40>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <HAL_Init+0x40>)
 8000532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000538:	2003      	movs	r0, #3
 800053a:	f000 ff3e 	bl	80013ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800053e:	2000      	movs	r0, #0
 8000540:	f005 fc64 	bl	8005e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000544:	f005 fb9e 	bl	8005c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000548:	2300      	movs	r3, #0
}
 800054a:	4618      	mov	r0, r3
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <HAL_IncTick+0x20>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	461a      	mov	r2, r3
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <HAL_IncTick+0x24>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4413      	add	r3, r2
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <HAL_IncTick+0x24>)
 8000566:	6013      	str	r3, [r2, #0]
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000004 	.word	0x20000004
 8000578:	20004934 	.word	0x20004934

0800057c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return uwTick;
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <HAL_GetTick+0x14>)
 8000582:	681b      	ldr	r3, [r3, #0]
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20004934 	.word	0x20004934

08000594 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d101      	bne.n	80005a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
 80005a4:	e0ed      	b.n	8000782 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d102      	bne.n	80005b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f005 fb92 	bl	8005cdc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f022 0202 	bic.w	r2, r2, #2
 80005c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005c8:	f7ff ffd8 	bl	800057c <HAL_GetTick>
 80005cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80005ce:	e012      	b.n	80005f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80005d0:	f7ff ffd4 	bl	800057c <HAL_GetTick>
 80005d4:	4602      	mov	r2, r0
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	2b0a      	cmp	r3, #10
 80005dc:	d90b      	bls.n	80005f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2205      	movs	r2, #5
 80005ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e0c5      	b.n	8000782 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	f003 0302 	and.w	r3, r3, #2
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1e5      	bne.n	80005d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f042 0201 	orr.w	r2, r2, #1
 8000612:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000614:	f7ff ffb2 	bl	800057c <HAL_GetTick>
 8000618:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800061a:	e012      	b.n	8000642 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800061c:	f7ff ffae 	bl	800057c <HAL_GetTick>
 8000620:	4602      	mov	r2, r0
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	2b0a      	cmp	r3, #10
 8000628:	d90b      	bls.n	8000642 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800062e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2205      	movs	r2, #5
 800063a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
 8000640:	e09f      	b.n	8000782 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0e5      	beq.n	800061c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	7e1b      	ldrb	r3, [r3, #24]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d108      	bne.n	800066a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	e007      	b.n	800067a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000678:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7e5b      	ldrb	r3, [r3, #25]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d108      	bne.n	8000694 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	e007      	b.n	80006a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80006a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	7e9b      	ldrb	r3, [r3, #26]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d108      	bne.n	80006be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f042 0220 	orr.w	r2, r2, #32
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	e007      	b.n	80006ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f022 0220 	bic.w	r2, r2, #32
 80006cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	7edb      	ldrb	r3, [r3, #27]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d108      	bne.n	80006e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f022 0210 	bic.w	r2, r2, #16
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	e007      	b.n	80006f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f042 0210 	orr.w	r2, r2, #16
 80006f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	7f1b      	ldrb	r3, [r3, #28]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d108      	bne.n	8000712 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f042 0208 	orr.w	r2, r2, #8
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	e007      	b.n	8000722 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f022 0208 	bic.w	r2, r2, #8
 8000720:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	7f5b      	ldrb	r3, [r3, #29]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d108      	bne.n	800073c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f042 0204 	orr.w	r2, r2, #4
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	e007      	b.n	800074c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f022 0204 	bic.w	r2, r2, #4
 800074a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	689a      	ldr	r2, [r3, #8]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	431a      	orrs	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	691b      	ldr	r3, [r3, #16]
 800075a:	431a      	orrs	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	695b      	ldr	r3, [r3, #20]
 8000760:	ea42 0103 	orr.w	r1, r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	1e5a      	subs	r2, r3, #1
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	430a      	orrs	r2, r1
 8000770:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800078c:	b480      	push	{r7}
 800078e:	b087      	sub	sp, #28
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007a2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80007a4:	7cfb      	ldrb	r3, [r7, #19]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d003      	beq.n	80007b2 <HAL_CAN_ConfigFilter+0x26>
 80007aa:	7cfb      	ldrb	r3, [r7, #19]
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	f040 80be 	bne.w	800092e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80007b2:	4b65      	ldr	r3, [pc, #404]	; (8000948 <HAL_CAN_ConfigFilter+0x1bc>)
 80007b4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80007bc:	f043 0201 	orr.w	r2, r3, #1
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80007cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	431a      	orrs	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f003 031f 	and.w	r3, r3, #31
 80007f2:	2201      	movs	r2, #1
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	43db      	mvns	r3, r3
 8000804:	401a      	ands	r2, r3
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d123      	bne.n	800085c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	43db      	mvns	r3, r3
 800081e:	401a      	ands	r2, r3
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000836:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	3248      	adds	r2, #72	; 0x48
 800083c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000850:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000852:	6979      	ldr	r1, [r7, #20]
 8000854:	3348      	adds	r3, #72	; 0x48
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	440b      	add	r3, r1
 800085a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	69db      	ldr	r3, [r3, #28]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d122      	bne.n	80008aa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	431a      	orrs	r2, r3
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000880:	683a      	ldr	r2, [r7, #0]
 8000882:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000884:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	3248      	adds	r2, #72	; 0x48
 800088a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800089e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008a0:	6979      	ldr	r1, [r7, #20]
 80008a2:	3348      	adds	r3, #72	; 0x48
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	440b      	add	r3, r1
 80008a8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d109      	bne.n	80008c6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	43db      	mvns	r3, r3
 80008bc:	401a      	ands	r2, r3
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80008c4:	e007      	b.n	80008d6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	431a      	orrs	r2, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	691b      	ldr	r3, [r3, #16]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d109      	bne.n	80008f2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	43db      	mvns	r3, r3
 80008e8:	401a      	ands	r2, r3
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80008f0:	e007      	b.n	8000902 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	431a      	orrs	r2, r3
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	6a1b      	ldr	r3, [r3, #32]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d107      	bne.n	800091a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	431a      	orrs	r2, r3
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000920:	f023 0201 	bic.w	r2, r3, #1
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	e006      	b.n	800093c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000932:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
  }
}
 800093c:	4618      	mov	r0, r3
 800093e:	371c      	adds	r7, #28
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	40006400 	.word	0x40006400

0800094c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800095a:	b2db      	uxtb	r3, r3
 800095c:	2b01      	cmp	r3, #1
 800095e:	d12e      	bne.n	80009be <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2202      	movs	r2, #2
 8000964:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f022 0201 	bic.w	r2, r2, #1
 8000976:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000978:	f7ff fe00 	bl	800057c <HAL_GetTick>
 800097c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800097e:	e012      	b.n	80009a6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000980:	f7ff fdfc 	bl	800057c <HAL_GetTick>
 8000984:	4602      	mov	r2, r0
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	2b0a      	cmp	r3, #10
 800098c:	d90b      	bls.n	80009a6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000992:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2205      	movs	r2, #5
 800099e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e012      	b.n	80009cc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d1e5      	bne.n	8000980 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e006      	b.n	80009cc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
  }
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b089      	sub	sp, #36	; 0x24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
 80009e0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009e8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80009f2:	7ffb      	ldrb	r3, [r7, #31]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d003      	beq.n	8000a00 <HAL_CAN_AddTxMessage+0x2c>
 80009f8:	7ffb      	ldrb	r3, [r7, #31]
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	f040 80b8 	bne.w	8000b70 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10a      	bne.n	8000a20 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d105      	bne.n	8000a20 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f000 80a0 	beq.w	8000b60 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	0e1b      	lsrs	r3, r3, #24
 8000a24:	f003 0303 	and.w	r3, r3, #3
 8000a28:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d907      	bls.n	8000a40 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e09e      	b.n	8000b7e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000a40:	2201      	movs	r2, #1
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	409a      	lsls	r2, r3
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d10d      	bne.n	8000a6e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a5c:	68f9      	ldr	r1, [r7, #12]
 8000a5e:	6809      	ldr	r1, [r1, #0]
 8000a60:	431a      	orrs	r2, r3
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3318      	adds	r3, #24
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	440b      	add	r3, r1
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	e00f      	b.n	8000a8e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a78:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a7e:	68f9      	ldr	r1, [r7, #12]
 8000a80:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000a82:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	3318      	adds	r3, #24
 8000a88:	011b      	lsls	r3, r3, #4
 8000a8a:	440b      	add	r3, r1
 8000a8c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	6819      	ldr	r1, [r3, #0]
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	691a      	ldr	r2, [r3, #16]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3318      	adds	r3, #24
 8000a9a:	011b      	lsls	r3, r3, #4
 8000a9c:	440b      	add	r3, r1
 8000a9e:	3304      	adds	r3, #4
 8000aa0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	7d1b      	ldrb	r3, [r3, #20]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d111      	bne.n	8000ace <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3318      	adds	r3, #24
 8000ab2:	011b      	lsls	r3, r3, #4
 8000ab4:	4413      	add	r3, r2
 8000ab6:	3304      	adds	r3, #4
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	6811      	ldr	r1, [r2, #0]
 8000abe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	3318      	adds	r3, #24
 8000ac6:	011b      	lsls	r3, r3, #4
 8000ac8:	440b      	add	r3, r1
 8000aca:	3304      	adds	r3, #4
 8000acc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3307      	adds	r3, #7
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	061a      	lsls	r2, r3, #24
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3306      	adds	r3, #6
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	041b      	lsls	r3, r3, #16
 8000ade:	431a      	orrs	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3305      	adds	r3, #5
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	021b      	lsls	r3, r3, #8
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	3204      	adds	r2, #4
 8000aee:	7812      	ldrb	r2, [r2, #0]
 8000af0:	4610      	mov	r0, r2
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	6811      	ldr	r1, [r2, #0]
 8000af6:	ea43 0200 	orr.w	r2, r3, r0
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	440b      	add	r3, r1
 8000b00:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000b04:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3303      	adds	r3, #3
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	061a      	lsls	r2, r3, #24
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3302      	adds	r3, #2
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	041b      	lsls	r3, r3, #16
 8000b16:	431a      	orrs	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	4313      	orrs	r3, r2
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	7812      	ldrb	r2, [r2, #0]
 8000b26:	4610      	mov	r0, r2
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	6811      	ldr	r1, [r2, #0]
 8000b2c:	ea43 0200 	orr.w	r2, r3, r0
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	440b      	add	r3, r1
 8000b36:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000b3a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	3318      	adds	r3, #24
 8000b44:	011b      	lsls	r3, r3, #4
 8000b46:	4413      	add	r3, r2
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	6811      	ldr	r1, [r2, #0]
 8000b4e:	f043 0201 	orr.w	r2, r3, #1
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	3318      	adds	r3, #24
 8000b56:	011b      	lsls	r3, r3, #4
 8000b58:	440b      	add	r3, r1
 8000b5a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e00e      	b.n	8000b7e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e006      	b.n	8000b7e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
  }
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3724      	adds	r7, #36	; 0x24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b087      	sub	sp, #28
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
 8000b96:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b9e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ba0:	7dfb      	ldrb	r3, [r7, #23]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d003      	beq.n	8000bae <HAL_CAN_GetRxMessage+0x24>
 8000ba6:	7dfb      	ldrb	r3, [r7, #23]
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	f040 80f3 	bne.w	8000d94 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d10e      	bne.n	8000bd2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	f003 0303 	and.w	r3, r3, #3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d116      	bne.n	8000bf0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e0e7      	b.n	8000da2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	691b      	ldr	r3, [r3, #16]
 8000bd8:	f003 0303 	and.w	r3, r3, #3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d107      	bne.n	8000bf0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000bec:	2301      	movs	r3, #1
 8000bee:	e0d8      	b.n	8000da2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	331b      	adds	r3, #27
 8000bf8:	011b      	lsls	r3, r3, #4
 8000bfa:	4413      	add	r3, r2
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f003 0204 	and.w	r2, r3, #4
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10c      	bne.n	8000c28 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	331b      	adds	r3, #27
 8000c16:	011b      	lsls	r3, r3, #4
 8000c18:	4413      	add	r3, r2
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	0d5b      	lsrs	r3, r3, #21
 8000c1e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	e00b      	b.n	8000c40 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	331b      	adds	r3, #27
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	4413      	add	r3, r2
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	08db      	lsrs	r3, r3, #3
 8000c38:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	331b      	adds	r3, #27
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	4413      	add	r3, r2
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 0202 	and.w	r2, r3, #2
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	331b      	adds	r3, #27
 8000c5e:	011b      	lsls	r3, r3, #4
 8000c60:	4413      	add	r3, r2
 8000c62:	3304      	adds	r3, #4
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 020f 	and.w	r2, r3, #15
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	331b      	adds	r3, #27
 8000c76:	011b      	lsls	r3, r3, #4
 8000c78:	4413      	add	r3, r2
 8000c7a:	3304      	adds	r3, #4
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	0a1b      	lsrs	r3, r3, #8
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	331b      	adds	r3, #27
 8000c8e:	011b      	lsls	r3, r3, #4
 8000c90:	4413      	add	r3, r2
 8000c92:	3304      	adds	r3, #4
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	0c1b      	lsrs	r3, r3, #16
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	011b      	lsls	r3, r3, #4
 8000ca6:	4413      	add	r3, r2
 8000ca8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	011b      	lsls	r3, r3, #4
 8000cbc:	4413      	add	r3, r2
 8000cbe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	0a1a      	lsrs	r2, r3, #8
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	011b      	lsls	r3, r3, #4
 8000cd6:	4413      	add	r3, r2
 8000cd8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	0c1a      	lsrs	r2, r3, #16
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	3302      	adds	r3, #2
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	011b      	lsls	r3, r3, #4
 8000cf0:	4413      	add	r3, r2
 8000cf2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	0e1a      	lsrs	r2, r3, #24
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	3303      	adds	r3, #3
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	011b      	lsls	r3, r3, #4
 8000d0a:	4413      	add	r3, r2
 8000d0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	3304      	adds	r3, #4
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	011b      	lsls	r3, r3, #4
 8000d22:	4413      	add	r3, r2
 8000d24:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	0a1a      	lsrs	r2, r3, #8
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	3305      	adds	r3, #5
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	011b      	lsls	r3, r3, #4
 8000d3c:	4413      	add	r3, r2
 8000d3e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	0c1a      	lsrs	r2, r3, #16
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	3306      	adds	r3, #6
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	011b      	lsls	r3, r3, #4
 8000d56:	4413      	add	r3, r2
 8000d58:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	0e1a      	lsrs	r2, r3, #24
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	3307      	adds	r3, #7
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d108      	bne.n	8000d80 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f042 0220 	orr.w	r2, r2, #32
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	e007      	b.n	8000d90 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	691a      	ldr	r2, [r3, #16]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f042 0220 	orr.w	r2, r2, #32
 8000d8e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000d90:	2300      	movs	r3, #0
 8000d92:	e006      	b.n	8000da2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
  }
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	371c      	adds	r7, #28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b085      	sub	sp, #20
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dbe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d002      	beq.n	8000dcc <HAL_CAN_ActivateNotification+0x1e>
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d109      	bne.n	8000de0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6959      	ldr	r1, [r3, #20]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e006      	b.n	8000dee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
  }
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b08a      	sub	sp, #40	; 0x28
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000e36:	6a3b      	ldr	r3, [r7, #32]
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d07c      	beq.n	8000f3a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d023      	beq.n	8000e92 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f000 f97d 	bl	800115c <HAL_CAN_TxMailbox0CompleteCallback>
 8000e62:	e016      	b.n	8000e92 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d004      	beq.n	8000e78 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
 8000e76:	e00c      	b.n	8000e92 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d004      	beq.n	8000e8c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
 8000e8a:	e002      	b.n	8000e92 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f000 f983 	bl	8001198 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d024      	beq.n	8000ee6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ea4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 f95d 	bl	8001170 <HAL_CAN_TxMailbox1CompleteCallback>
 8000eb6:	e016      	b.n	8000ee6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d004      	beq.n	8000ecc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eca:	e00c      	b.n	8000ee6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d004      	beq.n	8000ee0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ede:	e002      	b.n	8000ee6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 f963 	bl	80011ac <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d024      	beq.n	8000f3a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ef8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 f93d 	bl	8001184 <HAL_CAN_TxMailbox2CompleteCallback>
 8000f0a:	e016      	b.n	8000f3a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d004      	beq.n	8000f20 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f1e:	e00c      	b.n	8000f3a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d004      	beq.n	8000f34 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
 8000f32:	e002      	b.n	8000f3a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 f943 	bl	80011c0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000f3a:	6a3b      	ldr	r3, [r7, #32]
 8000f3c:	f003 0308 	and.w	r3, r3, #8
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d00c      	beq.n	8000f5e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	f003 0310 	and.w	r3, r3, #16
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d007      	beq.n	8000f5e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2210      	movs	r2, #16
 8000f5c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00b      	beq.n	8000f80 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d006      	beq.n	8000f80 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2208      	movs	r2, #8
 8000f78:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f934 	bl	80011e8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000f80:	6a3b      	ldr	r3, [r7, #32]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d009      	beq.n	8000f9e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 f91b 	bl	80011d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00c      	beq.n	8000fc2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d007      	beq.n	8000fc2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2210      	movs	r2, #16
 8000fc0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000fc2:	6a3b      	ldr	r3, [r7, #32]
 8000fc4:	f003 0320 	and.w	r3, r3, #32
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00b      	beq.n	8000fe4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d006      	beq.n	8000fe4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2208      	movs	r2, #8
 8000fdc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 f916 	bl	8001210 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000fe4:	6a3b      	ldr	r3, [r7, #32]
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d009      	beq.n	8001002 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d002      	beq.n	8001002 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 f8fd 	bl	80011fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001002:	6a3b      	ldr	r3, [r7, #32]
 8001004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00b      	beq.n	8001024 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0310 	and.w	r3, r3, #16
 8001012:	2b00      	cmp	r3, #0
 8001014:	d006      	beq.n	8001024 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2210      	movs	r2, #16
 800101c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 f900 	bl	8001224 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00b      	beq.n	8001046 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	2b00      	cmp	r3, #0
 8001036:	d006      	beq.n	8001046 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2208      	movs	r2, #8
 800103e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 f8f9 	bl	8001238 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d075      	beq.n	800113c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	2b00      	cmp	r3, #0
 8001058:	d06c      	beq.n	8001134 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800105a:	6a3b      	ldr	r3, [r7, #32]
 800105c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001060:	2b00      	cmp	r3, #0
 8001062:	d008      	beq.n	8001076 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001076:	6a3b      	ldr	r3, [r7, #32]
 8001078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800107c:	2b00      	cmp	r3, #0
 800107e:	d008      	beq.n	8001092 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001092:	6a3b      	ldr	r3, [r7, #32]
 8001094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001098:	2b00      	cmp	r3, #0
 800109a:	d008      	beq.n	80010ae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80010ae:	6a3b      	ldr	r3, [r7, #32]
 80010b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d03d      	beq.n	8001134 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d038      	beq.n	8001134 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80010c8:	2b30      	cmp	r3, #48	; 0x30
 80010ca:	d017      	beq.n	80010fc <HAL_CAN_IRQHandler+0x302>
 80010cc:	2b30      	cmp	r3, #48	; 0x30
 80010ce:	d804      	bhi.n	80010da <HAL_CAN_IRQHandler+0x2e0>
 80010d0:	2b10      	cmp	r3, #16
 80010d2:	d009      	beq.n	80010e8 <HAL_CAN_IRQHandler+0x2ee>
 80010d4:	2b20      	cmp	r3, #32
 80010d6:	d00c      	beq.n	80010f2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80010d8:	e024      	b.n	8001124 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80010da:	2b50      	cmp	r3, #80	; 0x50
 80010dc:	d018      	beq.n	8001110 <HAL_CAN_IRQHandler+0x316>
 80010de:	2b60      	cmp	r3, #96	; 0x60
 80010e0:	d01b      	beq.n	800111a <HAL_CAN_IRQHandler+0x320>
 80010e2:	2b40      	cmp	r3, #64	; 0x40
 80010e4:	d00f      	beq.n	8001106 <HAL_CAN_IRQHandler+0x30c>
            break;
 80010e6:	e01d      	b.n	8001124 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	f043 0308 	orr.w	r3, r3, #8
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010f0:	e018      	b.n	8001124 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	f043 0310 	orr.w	r3, r3, #16
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010fa:	e013      	b.n	8001124 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	f043 0320 	orr.w	r3, r3, #32
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001104:	e00e      	b.n	8001124 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800110e:	e009      	b.n	8001124 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001118:	e004      	b.n	8001124 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001122:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	699a      	ldr	r2, [r3, #24]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001132:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2204      	movs	r2, #4
 800113a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	2b00      	cmp	r3, #0
 8001140:	d008      	beq.n	8001154 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	431a      	orrs	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 f87c 	bl	800124c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	; 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800127c:	4013      	ands	r3, r2
 800127e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800128c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001292:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	60d3      	str	r3, [r2, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f003 0307 	and.w	r3, r3, #7
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db0b      	blt.n	80012ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	4907      	ldr	r1, [pc, #28]	; (80012fc <__NVIC_EnableIRQ+0x38>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000e100 	.word	0xe000e100

08001300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db0a      	blt.n	800132a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	490c      	ldr	r1, [pc, #48]	; (800134c <__NVIC_SetPriority+0x4c>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	0112      	lsls	r2, r2, #4
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	440b      	add	r3, r1
 8001324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001328:	e00a      	b.n	8001340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4908      	ldr	r1, [pc, #32]	; (8001350 <__NVIC_SetPriority+0x50>)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	3b04      	subs	r3, #4
 8001338:	0112      	lsls	r2, r2, #4
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	440b      	add	r3, r1
 800133e:	761a      	strb	r2, [r3, #24]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000e100 	.word	0xe000e100
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f1c3 0307 	rsb	r3, r3, #7
 800136e:	2b04      	cmp	r3, #4
 8001370:	bf28      	it	cs
 8001372:	2304      	movcs	r3, #4
 8001374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3304      	adds	r3, #4
 800137a:	2b06      	cmp	r3, #6
 800137c:	d902      	bls.n	8001384 <NVIC_EncodePriority+0x30>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3b03      	subs	r3, #3
 8001382:	e000      	b.n	8001386 <NVIC_EncodePriority+0x32>
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	f04f 32ff 	mov.w	r2, #4294967295
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43da      	mvns	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	401a      	ands	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800139c:	f04f 31ff 	mov.w	r1, #4294967295
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43d9      	mvns	r1, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	4313      	orrs	r3, r2
         );
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3724      	adds	r7, #36	; 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ff4c 	bl	8001260 <__NVIC_SetPriorityGrouping>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e2:	f7ff ff61 	bl	80012a8 <__NVIC_GetPriorityGrouping>
 80013e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	68b9      	ldr	r1, [r7, #8]
 80013ec:	6978      	ldr	r0, [r7, #20]
 80013ee:	f7ff ffb1 	bl	8001354 <NVIC_EncodePriority>
 80013f2:	4602      	mov	r2, r0
 80013f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff80 	bl	8001300 <__NVIC_SetPriority>
}
 8001400:	bf00      	nop
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff54 	bl	80012c4 <__NVIC_EnableIRQ>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001424:	b480      	push	{r7}
 8001426:	b089      	sub	sp, #36	; 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
 800143e:	e165      	b.n	800170c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001440:	2201      	movs	r2, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	429a      	cmp	r2, r3
 800145a:	f040 8154 	bne.w	8001706 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d00b      	beq.n	800147e <HAL_GPIO_Init+0x5a>
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b02      	cmp	r3, #2
 800146c:	d007      	beq.n	800147e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001472:	2b11      	cmp	r3, #17
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b12      	cmp	r3, #18
 800147c:	d130      	bne.n	80014e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	2203      	movs	r2, #3
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014b4:	2201      	movs	r2, #1
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	091b      	lsrs	r3, r3, #4
 80014ca:	f003 0201 	and.w	r2, r3, #1
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	2203      	movs	r2, #3
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0xfc>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b12      	cmp	r3, #18
 800151e:	d123      	bne.n	8001568 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	08da      	lsrs	r2, r3, #3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3208      	adds	r2, #8
 8001528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	220f      	movs	r2, #15
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	08da      	lsrs	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3208      	adds	r2, #8
 8001562:	69b9      	ldr	r1, [r7, #24]
 8001564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	2203      	movs	r2, #3
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0203 	and.w	r2, r3, #3
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 80ae 	beq.w	8001706 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b5c      	ldr	r3, [pc, #368]	; (8001720 <HAL_GPIO_Init+0x2fc>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	4a5b      	ldr	r2, [pc, #364]	; (8001720 <HAL_GPIO_Init+0x2fc>)
 80015b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ba:	4b59      	ldr	r3, [pc, #356]	; (8001720 <HAL_GPIO_Init+0x2fc>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c6:	4a57      	ldr	r2, [pc, #348]	; (8001724 <HAL_GPIO_Init+0x300>)
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	089b      	lsrs	r3, r3, #2
 80015cc:	3302      	adds	r3, #2
 80015ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	220f      	movs	r2, #15
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4e      	ldr	r2, [pc, #312]	; (8001728 <HAL_GPIO_Init+0x304>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d025      	beq.n	800163e <HAL_GPIO_Init+0x21a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4d      	ldr	r2, [pc, #308]	; (800172c <HAL_GPIO_Init+0x308>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d01f      	beq.n	800163a <HAL_GPIO_Init+0x216>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4c      	ldr	r2, [pc, #304]	; (8001730 <HAL_GPIO_Init+0x30c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d019      	beq.n	8001636 <HAL_GPIO_Init+0x212>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4b      	ldr	r2, [pc, #300]	; (8001734 <HAL_GPIO_Init+0x310>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d013      	beq.n	8001632 <HAL_GPIO_Init+0x20e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4a      	ldr	r2, [pc, #296]	; (8001738 <HAL_GPIO_Init+0x314>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d00d      	beq.n	800162e <HAL_GPIO_Init+0x20a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a49      	ldr	r2, [pc, #292]	; (800173c <HAL_GPIO_Init+0x318>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d007      	beq.n	800162a <HAL_GPIO_Init+0x206>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a48      	ldr	r2, [pc, #288]	; (8001740 <HAL_GPIO_Init+0x31c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d101      	bne.n	8001626 <HAL_GPIO_Init+0x202>
 8001622:	2306      	movs	r3, #6
 8001624:	e00c      	b.n	8001640 <HAL_GPIO_Init+0x21c>
 8001626:	2307      	movs	r3, #7
 8001628:	e00a      	b.n	8001640 <HAL_GPIO_Init+0x21c>
 800162a:	2305      	movs	r3, #5
 800162c:	e008      	b.n	8001640 <HAL_GPIO_Init+0x21c>
 800162e:	2304      	movs	r3, #4
 8001630:	e006      	b.n	8001640 <HAL_GPIO_Init+0x21c>
 8001632:	2303      	movs	r3, #3
 8001634:	e004      	b.n	8001640 <HAL_GPIO_Init+0x21c>
 8001636:	2302      	movs	r3, #2
 8001638:	e002      	b.n	8001640 <HAL_GPIO_Init+0x21c>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <HAL_GPIO_Init+0x21c>
 800163e:	2300      	movs	r3, #0
 8001640:	69fa      	ldr	r2, [r7, #28]
 8001642:	f002 0203 	and.w	r2, r2, #3
 8001646:	0092      	lsls	r2, r2, #2
 8001648:	4093      	lsls	r3, r2
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001650:	4934      	ldr	r1, [pc, #208]	; (8001724 <HAL_GPIO_Init+0x300>)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3302      	adds	r3, #2
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800165e:	4b39      	ldr	r3, [pc, #228]	; (8001744 <HAL_GPIO_Init+0x320>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	43db      	mvns	r3, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4013      	ands	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001682:	4a30      	ldr	r2, [pc, #192]	; (8001744 <HAL_GPIO_Init+0x320>)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001688:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <HAL_GPIO_Init+0x320>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ac:	4a25      	ldr	r2, [pc, #148]	; (8001744 <HAL_GPIO_Init+0x320>)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016b2:	4b24      	ldr	r3, [pc, #144]	; (8001744 <HAL_GPIO_Init+0x320>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016d6:	4a1b      	ldr	r2, [pc, #108]	; (8001744 <HAL_GPIO_Init+0x320>)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_GPIO_Init+0x320>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001700:	4a10      	ldr	r2, [pc, #64]	; (8001744 <HAL_GPIO_Init+0x320>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3301      	adds	r3, #1
 800170a:	61fb      	str	r3, [r7, #28]
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	2b0f      	cmp	r3, #15
 8001710:	f67f ae96 	bls.w	8001440 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001714:	bf00      	nop
 8001716:	3724      	adds	r7, #36	; 0x24
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40023800 	.word	0x40023800
 8001724:	40013800 	.word	0x40013800
 8001728:	40020000 	.word	0x40020000
 800172c:	40020400 	.word	0x40020400
 8001730:	40020800 	.word	0x40020800
 8001734:	40020c00 	.word	0x40020c00
 8001738:	40021000 	.word	0x40021000
 800173c:	40021400 	.word	0x40021400
 8001740:	40021800 	.word	0x40021800
 8001744:	40013c00 	.word	0x40013c00

08001748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
 8001754:	4613      	mov	r3, r2
 8001756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001758:	787b      	ldrb	r3, [r7, #1]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001764:	e003      	b.n	800176e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001766:	887b      	ldrh	r3, [r7, #2]
 8001768:	041a      	lsls	r2, r3, #16
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	619a      	str	r2, [r3, #24]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0cc      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001790:	4b68      	ldr	r3, [pc, #416]	; (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 030f 	and.w	r3, r3, #15
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d90c      	bls.n	80017b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179e:	4b65      	ldr	r3, [pc, #404]	; (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b63      	ldr	r3, [pc, #396]	; (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0b8      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d020      	beq.n	8001806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d0:	4b59      	ldr	r3, [pc, #356]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4a58      	ldr	r2, [pc, #352]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e8:	4b53      	ldr	r3, [pc, #332]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	4a52      	ldr	r2, [pc, #328]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f4:	4b50      	ldr	r3, [pc, #320]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	494d      	ldr	r1, [pc, #308]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	4313      	orrs	r3, r2
 8001804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d044      	beq.n	800189c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d107      	bne.n	800182a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181a:	4b47      	ldr	r3, [pc, #284]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d119      	bne.n	800185a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e07f      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d003      	beq.n	800183a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001836:	2b03      	cmp	r3, #3
 8001838:	d107      	bne.n	800184a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183a:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d109      	bne.n	800185a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e06f      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184a:	4b3b      	ldr	r3, [pc, #236]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e067      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800185a:	4b37      	ldr	r3, [pc, #220]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f023 0203 	bic.w	r2, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4934      	ldr	r1, [pc, #208]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	4313      	orrs	r3, r2
 800186a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800186c:	f7fe fe86 	bl	800057c <HAL_GetTick>
 8001870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	e00a      	b.n	800188a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001874:	f7fe fe82 	bl	800057c <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001882:	4293      	cmp	r3, r2
 8001884:	d901      	bls.n	800188a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e04f      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188a:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 020c 	and.w	r2, r3, #12
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	429a      	cmp	r2, r3
 800189a:	d1eb      	bne.n	8001874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800189c:	4b25      	ldr	r3, [pc, #148]	; (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 030f 	and.w	r3, r3, #15
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d20c      	bcs.n	80018c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b22      	ldr	r3, [pc, #136]	; (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e032      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d008      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	4916      	ldr	r1, [pc, #88]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d009      	beq.n	8001902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	490e      	ldr	r1, [pc, #56]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001902:	f000 f887 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 8001906:	4601      	mov	r1, r0
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	091b      	lsrs	r3, r3, #4
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	fa21 f303 	lsr.w	r3, r1, r3
 800191a:	4a09      	ldr	r2, [pc, #36]	; (8001940 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_RCC_ClockConfig+0x1c8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f004 fa72 	bl	8005e0c <HAL_InitTick>

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023c00 	.word	0x40023c00
 8001938:	40023800 	.word	0x40023800
 800193c:	0800607c 	.word	0x0800607c
 8001940:	2000000c 	.word	0x2000000c
 8001944:	20000000 	.word	0x20000000

08001948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <HAL_RCC_GetHCLKFreq+0x14>)
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	2000000c 	.word	0x2000000c

08001960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001964:	f7ff fff0 	bl	8001948 <HAL_RCC_GetHCLKFreq>
 8001968:	4601      	mov	r1, r0
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	0a9b      	lsrs	r3, r3, #10
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	4a03      	ldr	r2, [pc, #12]	; (8001984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001976:	5cd3      	ldrb	r3, [r2, r3]
 8001978:	fa21 f303 	lsr.w	r3, r1, r3
}
 800197c:	4618      	mov	r0, r3
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40023800 	.word	0x40023800
 8001984:	0800608c 	.word	0x0800608c

08001988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800198c:	f7ff ffdc 	bl	8001948 <HAL_RCC_GetHCLKFreq>
 8001990:	4601      	mov	r1, r0
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	0b5b      	lsrs	r3, r3, #13
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	4a03      	ldr	r2, [pc, #12]	; (80019ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800199e:	5cd3      	ldrb	r3, [r2, r3]
 80019a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40023800 	.word	0x40023800
 80019ac:	0800608c 	.word	0x0800608c

080019b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	220f      	movs	r2, #15
 80019be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_RCC_GetClockConfig+0x5c>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 0203 	and.w	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <HAL_RCC_GetClockConfig+0x5c>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_RCC_GetClockConfig+0x5c>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_RCC_GetClockConfig+0x5c>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	08db      	lsrs	r3, r3, #3
 80019ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <HAL_RCC_GetClockConfig+0x60>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 020f 	and.w	r2, r3, #15
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	601a      	str	r2, [r3, #0]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40023c00 	.word	0x40023c00

08001a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a2e:	4bc6      	ldr	r3, [pc, #792]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b0c      	cmp	r3, #12
 8001a38:	f200 817e 	bhi.w	8001d38 <HAL_RCC_GetSysClockFreq+0x324>
 8001a3c:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <HAL_RCC_GetSysClockFreq+0x30>)
 8001a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a42:	bf00      	nop
 8001a44:	08001a79 	.word	0x08001a79
 8001a48:	08001d39 	.word	0x08001d39
 8001a4c:	08001d39 	.word	0x08001d39
 8001a50:	08001d39 	.word	0x08001d39
 8001a54:	08001a7f 	.word	0x08001a7f
 8001a58:	08001d39 	.word	0x08001d39
 8001a5c:	08001d39 	.word	0x08001d39
 8001a60:	08001d39 	.word	0x08001d39
 8001a64:	08001a85 	.word	0x08001a85
 8001a68:	08001d39 	.word	0x08001d39
 8001a6c:	08001d39 	.word	0x08001d39
 8001a70:	08001d39 	.word	0x08001d39
 8001a74:	08001be1 	.word	0x08001be1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a78:	4bb4      	ldr	r3, [pc, #720]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x338>)
 8001a7a:	613b      	str	r3, [r7, #16]
       break;
 8001a7c:	e15f      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a7e:	4bb4      	ldr	r3, [pc, #720]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001a80:	613b      	str	r3, [r7, #16]
      break;
 8001a82:	e15c      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a84:	4bb0      	ldr	r3, [pc, #704]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a8c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a8e:	4bae      	ldr	r3, [pc, #696]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d04a      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9a:	4bab      	ldr	r3, [pc, #684]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	099b      	lsrs	r3, r3, #6
 8001aa0:	f04f 0400 	mov.w	r4, #0
 8001aa4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	ea03 0501 	and.w	r5, r3, r1
 8001ab0:	ea04 0602 	and.w	r6, r4, r2
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	4632      	mov	r2, r6
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	f04f 0400 	mov.w	r4, #0
 8001ac0:	0154      	lsls	r4, r2, #5
 8001ac2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ac6:	014b      	lsls	r3, r1, #5
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4622      	mov	r2, r4
 8001acc:	1b49      	subs	r1, r1, r5
 8001ace:	eb62 0206 	sbc.w	r2, r2, r6
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	f04f 0400 	mov.w	r4, #0
 8001ada:	0194      	lsls	r4, r2, #6
 8001adc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ae0:	018b      	lsls	r3, r1, #6
 8001ae2:	1a5b      	subs	r3, r3, r1
 8001ae4:	eb64 0402 	sbc.w	r4, r4, r2
 8001ae8:	f04f 0100 	mov.w	r1, #0
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	00e2      	lsls	r2, r4, #3
 8001af2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001af6:	00d9      	lsls	r1, r3, #3
 8001af8:	460b      	mov	r3, r1
 8001afa:	4614      	mov	r4, r2
 8001afc:	195b      	adds	r3, r3, r5
 8001afe:	eb44 0406 	adc.w	r4, r4, r6
 8001b02:	f04f 0100 	mov.w	r1, #0
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	0262      	lsls	r2, r4, #9
 8001b0c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001b10:	0259      	lsls	r1, r3, #9
 8001b12:	460b      	mov	r3, r1
 8001b14:	4614      	mov	r4, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	4621      	mov	r1, r4
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f04f 0400 	mov.w	r4, #0
 8001b20:	461a      	mov	r2, r3
 8001b22:	4623      	mov	r3, r4
 8001b24:	f7fe fb74 	bl	8000210 <__aeabi_uldivmod>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	460c      	mov	r4, r1
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e049      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b30:	4b85      	ldr	r3, [pc, #532]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	099b      	lsrs	r3, r3, #6
 8001b36:	f04f 0400 	mov.w	r4, #0
 8001b3a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	ea03 0501 	and.w	r5, r3, r1
 8001b46:	ea04 0602 	and.w	r6, r4, r2
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	4632      	mov	r2, r6
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	f04f 0400 	mov.w	r4, #0
 8001b56:	0154      	lsls	r4, r2, #5
 8001b58:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b5c:	014b      	lsls	r3, r1, #5
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4622      	mov	r2, r4
 8001b62:	1b49      	subs	r1, r1, r5
 8001b64:	eb62 0206 	sbc.w	r2, r2, r6
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	f04f 0400 	mov.w	r4, #0
 8001b70:	0194      	lsls	r4, r2, #6
 8001b72:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b76:	018b      	lsls	r3, r1, #6
 8001b78:	1a5b      	subs	r3, r3, r1
 8001b7a:	eb64 0402 	sbc.w	r4, r4, r2
 8001b7e:	f04f 0100 	mov.w	r1, #0
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	00e2      	lsls	r2, r4, #3
 8001b88:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b8c:	00d9      	lsls	r1, r3, #3
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4614      	mov	r4, r2
 8001b92:	195b      	adds	r3, r3, r5
 8001b94:	eb44 0406 	adc.w	r4, r4, r6
 8001b98:	f04f 0100 	mov.w	r1, #0
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	02a2      	lsls	r2, r4, #10
 8001ba2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ba6:	0299      	lsls	r1, r3, #10
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4614      	mov	r4, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	4621      	mov	r1, r4
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f04f 0400 	mov.w	r4, #0
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4623      	mov	r3, r4
 8001bba:	f7fe fb29 	bl	8000210 <__aeabi_uldivmod>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	460c      	mov	r4, r1
 8001bc2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bc4:	4b60      	ldr	r3, [pc, #384]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bdc:	613b      	str	r3, [r7, #16]
      break;
 8001bde:	e0ae      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001be0:	4b59      	ldr	r3, [pc, #356]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001be8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bea:	4b57      	ldr	r3, [pc, #348]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d04a      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf6:	4b54      	ldr	r3, [pc, #336]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	099b      	lsrs	r3, r3, #6
 8001bfc:	f04f 0400 	mov.w	r4, #0
 8001c00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	ea03 0501 	and.w	r5, r3, r1
 8001c0c:	ea04 0602 	and.w	r6, r4, r2
 8001c10:	4629      	mov	r1, r5
 8001c12:	4632      	mov	r2, r6
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	f04f 0400 	mov.w	r4, #0
 8001c1c:	0154      	lsls	r4, r2, #5
 8001c1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c22:	014b      	lsls	r3, r1, #5
 8001c24:	4619      	mov	r1, r3
 8001c26:	4622      	mov	r2, r4
 8001c28:	1b49      	subs	r1, r1, r5
 8001c2a:	eb62 0206 	sbc.w	r2, r2, r6
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	f04f 0400 	mov.w	r4, #0
 8001c36:	0194      	lsls	r4, r2, #6
 8001c38:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c3c:	018b      	lsls	r3, r1, #6
 8001c3e:	1a5b      	subs	r3, r3, r1
 8001c40:	eb64 0402 	sbc.w	r4, r4, r2
 8001c44:	f04f 0100 	mov.w	r1, #0
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	00e2      	lsls	r2, r4, #3
 8001c4e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c52:	00d9      	lsls	r1, r3, #3
 8001c54:	460b      	mov	r3, r1
 8001c56:	4614      	mov	r4, r2
 8001c58:	195b      	adds	r3, r3, r5
 8001c5a:	eb44 0406 	adc.w	r4, r4, r6
 8001c5e:	f04f 0100 	mov.w	r1, #0
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	0262      	lsls	r2, r4, #9
 8001c68:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001c6c:	0259      	lsls	r1, r3, #9
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4614      	mov	r4, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	4621      	mov	r1, r4
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f04f 0400 	mov.w	r4, #0
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4623      	mov	r3, r4
 8001c80:	f7fe fac6 	bl	8000210 <__aeabi_uldivmod>
 8001c84:	4603      	mov	r3, r0
 8001c86:	460c      	mov	r4, r1
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	e049      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8c:	4b2e      	ldr	r3, [pc, #184]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	099b      	lsrs	r3, r3, #6
 8001c92:	f04f 0400 	mov.w	r4, #0
 8001c96:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	ea03 0501 	and.w	r5, r3, r1
 8001ca2:	ea04 0602 	and.w	r6, r4, r2
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	4632      	mov	r2, r6
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	f04f 0400 	mov.w	r4, #0
 8001cb2:	0154      	lsls	r4, r2, #5
 8001cb4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cb8:	014b      	lsls	r3, r1, #5
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4622      	mov	r2, r4
 8001cbe:	1b49      	subs	r1, r1, r5
 8001cc0:	eb62 0206 	sbc.w	r2, r2, r6
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	f04f 0400 	mov.w	r4, #0
 8001ccc:	0194      	lsls	r4, r2, #6
 8001cce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cd2:	018b      	lsls	r3, r1, #6
 8001cd4:	1a5b      	subs	r3, r3, r1
 8001cd6:	eb64 0402 	sbc.w	r4, r4, r2
 8001cda:	f04f 0100 	mov.w	r1, #0
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	00e2      	lsls	r2, r4, #3
 8001ce4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ce8:	00d9      	lsls	r1, r3, #3
 8001cea:	460b      	mov	r3, r1
 8001cec:	4614      	mov	r4, r2
 8001cee:	195b      	adds	r3, r3, r5
 8001cf0:	eb44 0406 	adc.w	r4, r4, r6
 8001cf4:	f04f 0100 	mov.w	r1, #0
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	02a2      	lsls	r2, r4, #10
 8001cfe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d02:	0299      	lsls	r1, r3, #10
 8001d04:	460b      	mov	r3, r1
 8001d06:	4614      	mov	r4, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f04f 0400 	mov.w	r4, #0
 8001d12:	461a      	mov	r2, r3
 8001d14:	4623      	mov	r3, r4
 8001d16:	f7fe fa7b 	bl	8000210 <__aeabi_uldivmod>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	460c      	mov	r4, r1
 8001d1e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	0f1b      	lsrs	r3, r3, #28
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d34:	613b      	str	r3, [r7, #16]
      break;
 8001d36:	e002      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x338>)
 8001d3a:	613b      	str	r3, [r7, #16]
      break;
 8001d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d3e:	693b      	ldr	r3, [r7, #16]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	00f42400 	.word	0x00f42400
 8001d50:	007a1200 	.word	0x007a1200

08001d54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 8083 	beq.w	8001e74 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d6e:	4b95      	ldr	r3, [pc, #596]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d019      	beq.n	8001dae <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d7a:	4b92      	ldr	r3, [pc, #584]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d106      	bne.n	8001d94 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d86:	4b8f      	ldr	r3, [pc, #572]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d92:	d00c      	beq.n	8001dae <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d94:	4b8b      	ldr	r3, [pc, #556]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d9c:	2b0c      	cmp	r3, #12
 8001d9e:	d112      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001da0:	4b88      	ldr	r3, [pc, #544]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dac:	d10b      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dae:	4b85      	ldr	r3, [pc, #532]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d05b      	beq.n	8001e72 <HAL_RCC_OscConfig+0x11e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d157      	bne.n	8001e72 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e216      	b.n	80021f4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dce:	d106      	bne.n	8001dde <HAL_RCC_OscConfig+0x8a>
 8001dd0:	4b7c      	ldr	r3, [pc, #496]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a7b      	ldr	r2, [pc, #492]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	e01d      	b.n	8001e1a <HAL_RCC_OscConfig+0xc6>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de6:	d10c      	bne.n	8001e02 <HAL_RCC_OscConfig+0xae>
 8001de8:	4b76      	ldr	r3, [pc, #472]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a75      	ldr	r2, [pc, #468]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001dee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b73      	ldr	r3, [pc, #460]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a72      	ldr	r2, [pc, #456]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	e00b      	b.n	8001e1a <HAL_RCC_OscConfig+0xc6>
 8001e02:	4b70      	ldr	r3, [pc, #448]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a6f      	ldr	r2, [pc, #444]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	4b6d      	ldr	r3, [pc, #436]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a6c      	ldr	r2, [pc, #432]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001e14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d013      	beq.n	8001e4a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7fe fbab 	bl	800057c <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e2a:	f7fe fba7 	bl	800057c <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b64      	cmp	r3, #100	; 0x64
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e1db      	b.n	80021f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3c:	4b61      	ldr	r3, [pc, #388]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0xd6>
 8001e48:	e014      	b.n	8001e74 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7fe fb97 	bl	800057c <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e52:	f7fe fb93 	bl	800057c <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b64      	cmp	r3, #100	; 0x64
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e1c7      	b.n	80021f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e64:	4b57      	ldr	r3, [pc, #348]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f0      	bne.n	8001e52 <HAL_RCC_OscConfig+0xfe>
 8001e70:	e000      	b.n	8001e74 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e72:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d06f      	beq.n	8001f60 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e80:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d017      	beq.n	8001ebc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e8c:	4b4d      	ldr	r3, [pc, #308]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d105      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e98:	4b4a      	ldr	r3, [pc, #296]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00b      	beq.n	8001ebc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ea4:	4b47      	ldr	r3, [pc, #284]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001eac:	2b0c      	cmp	r3, #12
 8001eae:	d11c      	bne.n	8001eea <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eb0:	4b44      	ldr	r3, [pc, #272]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d116      	bne.n	8001eea <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebc:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x180>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e18f      	b.n	80021f4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed4:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4938      	ldr	r1, [pc, #224]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee8:	e03a      	b.n	8001f60 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d020      	beq.n	8001f34 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef2:	4b35      	ldr	r3, [pc, #212]	; (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7fe fb40 	bl	800057c <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f00:	f7fe fb3c 	bl	800057c <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e170      	b.n	80021f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f12:	4b2c      	ldr	r3, [pc, #176]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1e:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4925      	ldr	r1, [pc, #148]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
 8001f32:	e015      	b.n	8001f60 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f34:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3a:	f7fe fb1f 	bl	800057c <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f42:	f7fe fb1b 	bl	800057c <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e14f      	b.n	80021f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f0      	bne.n	8001f42 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d037      	beq.n	8001fdc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d016      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f74:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_RCC_OscConfig+0x278>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7a:	f7fe faff 	bl	800057c <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f82:	f7fe fafb 	bl	800057c <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e12f      	b.n	80021f4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_OscConfig+0x270>)
 8001f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x22e>
 8001fa0:	e01c      	b.n	8001fdc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_RCC_OscConfig+0x278>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7fe fae8 	bl	800057c <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fae:	e00f      	b.n	8001fd0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb0:	f7fe fae4 	bl	800057c <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d908      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e118      	b.n	80021f4 <HAL_RCC_OscConfig+0x4a0>
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	42470000 	.word	0x42470000
 8001fcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd0:	4b8a      	ldr	r3, [pc, #552]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 8001fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1e9      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8097 	beq.w	8002118 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fee:	4b83      	ldr	r3, [pc, #524]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10f      	bne.n	800201a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b7f      	ldr	r3, [pc, #508]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a7e      	ldr	r2, [pc, #504]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b7c      	ldr	r3, [pc, #496]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002016:	2301      	movs	r3, #1
 8002018:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201a:	4b79      	ldr	r3, [pc, #484]	; (8002200 <HAL_RCC_OscConfig+0x4ac>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d118      	bne.n	8002058 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002026:	4b76      	ldr	r3, [pc, #472]	; (8002200 <HAL_RCC_OscConfig+0x4ac>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a75      	ldr	r2, [pc, #468]	; (8002200 <HAL_RCC_OscConfig+0x4ac>)
 800202c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002032:	f7fe faa3 	bl	800057c <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203a:	f7fe fa9f 	bl	800057c <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e0d3      	b.n	80021f4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	4b6c      	ldr	r3, [pc, #432]	; (8002200 <HAL_RCC_OscConfig+0x4ac>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d106      	bne.n	800206e <HAL_RCC_OscConfig+0x31a>
 8002060:	4b66      	ldr	r3, [pc, #408]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	4a65      	ldr	r2, [pc, #404]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6713      	str	r3, [r2, #112]	; 0x70
 800206c:	e01c      	b.n	80020a8 <HAL_RCC_OscConfig+0x354>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b05      	cmp	r3, #5
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x33c>
 8002076:	4b61      	ldr	r3, [pc, #388]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207a:	4a60      	ldr	r2, [pc, #384]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 800207c:	f043 0304 	orr.w	r3, r3, #4
 8002080:	6713      	str	r3, [r2, #112]	; 0x70
 8002082:	4b5e      	ldr	r3, [pc, #376]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 8002084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002086:	4a5d      	ldr	r2, [pc, #372]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6713      	str	r3, [r2, #112]	; 0x70
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0x354>
 8002090:	4b5a      	ldr	r3, [pc, #360]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	4a59      	ldr	r2, [pc, #356]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	6713      	str	r3, [r2, #112]	; 0x70
 800209c:	4b57      	ldr	r3, [pc, #348]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 800209e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a0:	4a56      	ldr	r2, [pc, #344]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 80020a2:	f023 0304 	bic.w	r3, r3, #4
 80020a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d015      	beq.n	80020dc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7fe fa64 	bl	800057c <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7fe fa60 	bl	800057c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e092      	b.n	80021f4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ce:	4b4b      	ldr	r3, [pc, #300]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0ee      	beq.n	80020b8 <HAL_RCC_OscConfig+0x364>
 80020da:	e014      	b.n	8002106 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020dc:	f7fe fa4e 	bl	800057c <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e4:	f7fe fa4a 	bl	800057c <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e07c      	b.n	80021f4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fa:	4b40      	ldr	r3, [pc, #256]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1ee      	bne.n	80020e4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002106:	7dfb      	ldrb	r3, [r7, #23]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d105      	bne.n	8002118 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210c:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	4a3a      	ldr	r2, [pc, #232]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 8002112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002116:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d068      	beq.n	80021f2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002120:	4b36      	ldr	r3, [pc, #216]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 030c 	and.w	r3, r3, #12
 8002128:	2b08      	cmp	r3, #8
 800212a:	d060      	beq.n	80021ee <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d145      	bne.n	80021c0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002134:	4b33      	ldr	r3, [pc, #204]	; (8002204 <HAL_RCC_OscConfig+0x4b0>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213a:	f7fe fa1f 	bl	800057c <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002142:	f7fe fa1b 	bl	800057c <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e04f      	b.n	80021f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002154:	4b29      	ldr	r3, [pc, #164]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f0      	bne.n	8002142 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69da      	ldr	r2, [r3, #28]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	019b      	lsls	r3, r3, #6
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002176:	085b      	lsrs	r3, r3, #1
 8002178:	3b01      	subs	r3, #1
 800217a:	041b      	lsls	r3, r3, #16
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	061b      	lsls	r3, r3, #24
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	071b      	lsls	r3, r3, #28
 800218c:	491b      	ldr	r1, [pc, #108]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002192:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <HAL_RCC_OscConfig+0x4b0>)
 8002194:	2201      	movs	r2, #1
 8002196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7fe f9f0 	bl	800057c <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a0:	f7fe f9ec 	bl	800057c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e020      	b.n	80021f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x44c>
 80021be:	e018      	b.n	80021f2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c0:	4b10      	ldr	r3, [pc, #64]	; (8002204 <HAL_RCC_OscConfig+0x4b0>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7fe f9d9 	bl	800057c <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ce:	f7fe f9d5 	bl	800057c <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e009      	b.n	80021f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_RCC_OscConfig+0x4a8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f0      	bne.n	80021ce <HAL_RCC_OscConfig+0x47a>
 80021ec:	e001      	b.n	80021f2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40023800 	.word	0x40023800
 8002200:	40007000 	.word	0x40007000
 8002204:	42470060 	.word	0x42470060

08002208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e01d      	b.n	8002256 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f815 	bl	800225e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3304      	adds	r3, #4
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f000 f968 	bl	800251c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002272:	b480      	push	{r7}
 8002274:	b085      	sub	sp, #20
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0201 	orr.w	r2, r2, #1
 8002288:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b06      	cmp	r3, #6
 800229a:	d007      	beq.n	80022ac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0201 	orr.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d122      	bne.n	8002316 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d11b      	bne.n	8002316 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f06f 0202 	mvn.w	r2, #2
 80022e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f8ee 	bl	80024de <HAL_TIM_IC_CaptureCallback>
 8002302:	e005      	b.n	8002310 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f8e0 	bl	80024ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f8f1 	bl	80024f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b04      	cmp	r3, #4
 8002322:	d122      	bne.n	800236a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	2b04      	cmp	r3, #4
 8002330:	d11b      	bne.n	800236a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f06f 0204 	mvn.w	r2, #4
 800233a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f8c4 	bl	80024de <HAL_TIM_IC_CaptureCallback>
 8002356:	e005      	b.n	8002364 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f8b6 	bl	80024ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f8c7 	bl	80024f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b08      	cmp	r3, #8
 8002376:	d122      	bne.n	80023be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b08      	cmp	r3, #8
 8002384:	d11b      	bne.n	80023be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f06f 0208 	mvn.w	r2, #8
 800238e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2204      	movs	r2, #4
 8002394:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f89a 	bl	80024de <HAL_TIM_IC_CaptureCallback>
 80023aa:	e005      	b.n	80023b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f88c 	bl	80024ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f89d 	bl	80024f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	f003 0310 	and.w	r3, r3, #16
 80023c8:	2b10      	cmp	r3, #16
 80023ca:	d122      	bne.n	8002412 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	2b10      	cmp	r3, #16
 80023d8:	d11b      	bne.n	8002412 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f06f 0210 	mvn.w	r2, #16
 80023e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2208      	movs	r2, #8
 80023e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f870 	bl	80024de <HAL_TIM_IC_CaptureCallback>
 80023fe:	e005      	b.n	800240c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f862 	bl	80024ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f873 	bl	80024f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b01      	cmp	r3, #1
 800241e:	d10e      	bne.n	800243e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f06f 0201 	mvn.w	r2, #1
 8002436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f003 fc09 	bl	8005c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002448:	2b80      	cmp	r3, #128	; 0x80
 800244a:	d10e      	bne.n	800246a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002456:	2b80      	cmp	r3, #128	; 0x80
 8002458:	d107      	bne.n	800246a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f903 	bl	8002670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002474:	2b40      	cmp	r3, #64	; 0x40
 8002476:	d10e      	bne.n	8002496 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002482:	2b40      	cmp	r3, #64	; 0x40
 8002484:	d107      	bne.n	8002496 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800248e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f838 	bl	8002506 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	f003 0320 	and.w	r3, r3, #32
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d10e      	bne.n	80024c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f003 0320 	and.w	r3, r3, #32
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	d107      	bne.n	80024c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f06f 0220 	mvn.w	r2, #32
 80024ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f8cd 	bl	800265c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a40      	ldr	r2, [pc, #256]	; (8002630 <TIM_Base_SetConfig+0x114>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d013      	beq.n	800255c <TIM_Base_SetConfig+0x40>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253a:	d00f      	beq.n	800255c <TIM_Base_SetConfig+0x40>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a3d      	ldr	r2, [pc, #244]	; (8002634 <TIM_Base_SetConfig+0x118>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d00b      	beq.n	800255c <TIM_Base_SetConfig+0x40>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a3c      	ldr	r2, [pc, #240]	; (8002638 <TIM_Base_SetConfig+0x11c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d007      	beq.n	800255c <TIM_Base_SetConfig+0x40>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a3b      	ldr	r2, [pc, #236]	; (800263c <TIM_Base_SetConfig+0x120>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d003      	beq.n	800255c <TIM_Base_SetConfig+0x40>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a3a      	ldr	r2, [pc, #232]	; (8002640 <TIM_Base_SetConfig+0x124>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d108      	bne.n	800256e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a2f      	ldr	r2, [pc, #188]	; (8002630 <TIM_Base_SetConfig+0x114>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d02b      	beq.n	80025ce <TIM_Base_SetConfig+0xb2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257c:	d027      	beq.n	80025ce <TIM_Base_SetConfig+0xb2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a2c      	ldr	r2, [pc, #176]	; (8002634 <TIM_Base_SetConfig+0x118>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d023      	beq.n	80025ce <TIM_Base_SetConfig+0xb2>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a2b      	ldr	r2, [pc, #172]	; (8002638 <TIM_Base_SetConfig+0x11c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d01f      	beq.n	80025ce <TIM_Base_SetConfig+0xb2>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a2a      	ldr	r2, [pc, #168]	; (800263c <TIM_Base_SetConfig+0x120>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d01b      	beq.n	80025ce <TIM_Base_SetConfig+0xb2>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a29      	ldr	r2, [pc, #164]	; (8002640 <TIM_Base_SetConfig+0x124>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d017      	beq.n	80025ce <TIM_Base_SetConfig+0xb2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a28      	ldr	r2, [pc, #160]	; (8002644 <TIM_Base_SetConfig+0x128>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d013      	beq.n	80025ce <TIM_Base_SetConfig+0xb2>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a27      	ldr	r2, [pc, #156]	; (8002648 <TIM_Base_SetConfig+0x12c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00f      	beq.n	80025ce <TIM_Base_SetConfig+0xb2>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a26      	ldr	r2, [pc, #152]	; (800264c <TIM_Base_SetConfig+0x130>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d00b      	beq.n	80025ce <TIM_Base_SetConfig+0xb2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a25      	ldr	r2, [pc, #148]	; (8002650 <TIM_Base_SetConfig+0x134>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d007      	beq.n	80025ce <TIM_Base_SetConfig+0xb2>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a24      	ldr	r2, [pc, #144]	; (8002654 <TIM_Base_SetConfig+0x138>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d003      	beq.n	80025ce <TIM_Base_SetConfig+0xb2>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a23      	ldr	r2, [pc, #140]	; (8002658 <TIM_Base_SetConfig+0x13c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d108      	bne.n	80025e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <TIM_Base_SetConfig+0x114>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d003      	beq.n	8002614 <TIM_Base_SetConfig+0xf8>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a0c      	ldr	r2, [pc, #48]	; (8002640 <TIM_Base_SetConfig+0x124>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d103      	bne.n	800261c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	615a      	str	r2, [r3, #20]
}
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40010000 	.word	0x40010000
 8002634:	40000400 	.word	0x40000400
 8002638:	40000800 	.word	0x40000800
 800263c:	40000c00 	.word	0x40000c00
 8002640:	40010400 	.word	0x40010400
 8002644:	40014000 	.word	0x40014000
 8002648:	40014400 	.word	0x40014400
 800264c:	40014800 	.word	0x40014800
 8002650:	40001800 	.word	0x40001800
 8002654:	40001c00 	.word	0x40001c00
 8002658:	40002000 	.word	0x40002000

0800265c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e03f      	b.n	8002716 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d106      	bne.n	80026b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f003 fb66 	bl	8005d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2224      	movs	r2, #36	; 0x24
 80026b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f829 	bl	8002720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002724:	b085      	sub	sp, #20
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	4313      	orrs	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002762:	f023 030c 	bic.w	r3, r3, #12
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	68f9      	ldr	r1, [r7, #12]
 800276c:	430b      	orrs	r3, r1
 800276e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699a      	ldr	r2, [r3, #24]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800278e:	f040 818b 	bne.w	8002aa8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4ac1      	ldr	r2, [pc, #772]	; (8002a9c <UART_SetConfig+0x37c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d005      	beq.n	80027a8 <UART_SetConfig+0x88>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4abf      	ldr	r2, [pc, #764]	; (8002aa0 <UART_SetConfig+0x380>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	f040 80bd 	bne.w	8002922 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027a8:	f7ff f8ee 	bl	8001988 <HAL_RCC_GetPCLK2Freq>
 80027ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	461d      	mov	r5, r3
 80027b2:	f04f 0600 	mov.w	r6, #0
 80027b6:	46a8      	mov	r8, r5
 80027b8:	46b1      	mov	r9, r6
 80027ba:	eb18 0308 	adds.w	r3, r8, r8
 80027be:	eb49 0409 	adc.w	r4, r9, r9
 80027c2:	4698      	mov	r8, r3
 80027c4:	46a1      	mov	r9, r4
 80027c6:	eb18 0805 	adds.w	r8, r8, r5
 80027ca:	eb49 0906 	adc.w	r9, r9, r6
 80027ce:	f04f 0100 	mov.w	r1, #0
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80027da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80027de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80027e2:	4688      	mov	r8, r1
 80027e4:	4691      	mov	r9, r2
 80027e6:	eb18 0005 	adds.w	r0, r8, r5
 80027ea:	eb49 0106 	adc.w	r1, r9, r6
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	461d      	mov	r5, r3
 80027f4:	f04f 0600 	mov.w	r6, #0
 80027f8:	196b      	adds	r3, r5, r5
 80027fa:	eb46 0406 	adc.w	r4, r6, r6
 80027fe:	461a      	mov	r2, r3
 8002800:	4623      	mov	r3, r4
 8002802:	f7fd fd05 	bl	8000210 <__aeabi_uldivmod>
 8002806:	4603      	mov	r3, r0
 8002808:	460c      	mov	r4, r1
 800280a:	461a      	mov	r2, r3
 800280c:	4ba5      	ldr	r3, [pc, #660]	; (8002aa4 <UART_SetConfig+0x384>)
 800280e:	fba3 2302 	umull	r2, r3, r3, r2
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	461d      	mov	r5, r3
 800281c:	f04f 0600 	mov.w	r6, #0
 8002820:	46a9      	mov	r9, r5
 8002822:	46b2      	mov	sl, r6
 8002824:	eb19 0309 	adds.w	r3, r9, r9
 8002828:	eb4a 040a 	adc.w	r4, sl, sl
 800282c:	4699      	mov	r9, r3
 800282e:	46a2      	mov	sl, r4
 8002830:	eb19 0905 	adds.w	r9, r9, r5
 8002834:	eb4a 0a06 	adc.w	sl, sl, r6
 8002838:	f04f 0100 	mov.w	r1, #0
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002844:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002848:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800284c:	4689      	mov	r9, r1
 800284e:	4692      	mov	sl, r2
 8002850:	eb19 0005 	adds.w	r0, r9, r5
 8002854:	eb4a 0106 	adc.w	r1, sl, r6
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	461d      	mov	r5, r3
 800285e:	f04f 0600 	mov.w	r6, #0
 8002862:	196b      	adds	r3, r5, r5
 8002864:	eb46 0406 	adc.w	r4, r6, r6
 8002868:	461a      	mov	r2, r3
 800286a:	4623      	mov	r3, r4
 800286c:	f7fd fcd0 	bl	8000210 <__aeabi_uldivmod>
 8002870:	4603      	mov	r3, r0
 8002872:	460c      	mov	r4, r1
 8002874:	461a      	mov	r2, r3
 8002876:	4b8b      	ldr	r3, [pc, #556]	; (8002aa4 <UART_SetConfig+0x384>)
 8002878:	fba3 1302 	umull	r1, r3, r3, r2
 800287c:	095b      	lsrs	r3, r3, #5
 800287e:	2164      	movs	r1, #100	; 0x64
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	3332      	adds	r3, #50	; 0x32
 800288a:	4a86      	ldr	r2, [pc, #536]	; (8002aa4 <UART_SetConfig+0x384>)
 800288c:	fba2 2303 	umull	r2, r3, r2, r3
 8002890:	095b      	lsrs	r3, r3, #5
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002898:	4498      	add	r8, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	461d      	mov	r5, r3
 800289e:	f04f 0600 	mov.w	r6, #0
 80028a2:	46a9      	mov	r9, r5
 80028a4:	46b2      	mov	sl, r6
 80028a6:	eb19 0309 	adds.w	r3, r9, r9
 80028aa:	eb4a 040a 	adc.w	r4, sl, sl
 80028ae:	4699      	mov	r9, r3
 80028b0:	46a2      	mov	sl, r4
 80028b2:	eb19 0905 	adds.w	r9, r9, r5
 80028b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80028ba:	f04f 0100 	mov.w	r1, #0
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028ce:	4689      	mov	r9, r1
 80028d0:	4692      	mov	sl, r2
 80028d2:	eb19 0005 	adds.w	r0, r9, r5
 80028d6:	eb4a 0106 	adc.w	r1, sl, r6
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	461d      	mov	r5, r3
 80028e0:	f04f 0600 	mov.w	r6, #0
 80028e4:	196b      	adds	r3, r5, r5
 80028e6:	eb46 0406 	adc.w	r4, r6, r6
 80028ea:	461a      	mov	r2, r3
 80028ec:	4623      	mov	r3, r4
 80028ee:	f7fd fc8f 	bl	8000210 <__aeabi_uldivmod>
 80028f2:	4603      	mov	r3, r0
 80028f4:	460c      	mov	r4, r1
 80028f6:	461a      	mov	r2, r3
 80028f8:	4b6a      	ldr	r3, [pc, #424]	; (8002aa4 <UART_SetConfig+0x384>)
 80028fa:	fba3 1302 	umull	r1, r3, r3, r2
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	2164      	movs	r1, #100	; 0x64
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	3332      	adds	r3, #50	; 0x32
 800290c:	4a65      	ldr	r2, [pc, #404]	; (8002aa4 <UART_SetConfig+0x384>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	f003 0207 	and.w	r2, r3, #7
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4442      	add	r2, r8
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	e26f      	b.n	8002e02 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002922:	f7ff f81d 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 8002926:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	461d      	mov	r5, r3
 800292c:	f04f 0600 	mov.w	r6, #0
 8002930:	46a8      	mov	r8, r5
 8002932:	46b1      	mov	r9, r6
 8002934:	eb18 0308 	adds.w	r3, r8, r8
 8002938:	eb49 0409 	adc.w	r4, r9, r9
 800293c:	4698      	mov	r8, r3
 800293e:	46a1      	mov	r9, r4
 8002940:	eb18 0805 	adds.w	r8, r8, r5
 8002944:	eb49 0906 	adc.w	r9, r9, r6
 8002948:	f04f 0100 	mov.w	r1, #0
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002954:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002958:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800295c:	4688      	mov	r8, r1
 800295e:	4691      	mov	r9, r2
 8002960:	eb18 0005 	adds.w	r0, r8, r5
 8002964:	eb49 0106 	adc.w	r1, r9, r6
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	461d      	mov	r5, r3
 800296e:	f04f 0600 	mov.w	r6, #0
 8002972:	196b      	adds	r3, r5, r5
 8002974:	eb46 0406 	adc.w	r4, r6, r6
 8002978:	461a      	mov	r2, r3
 800297a:	4623      	mov	r3, r4
 800297c:	f7fd fc48 	bl	8000210 <__aeabi_uldivmod>
 8002980:	4603      	mov	r3, r0
 8002982:	460c      	mov	r4, r1
 8002984:	461a      	mov	r2, r3
 8002986:	4b47      	ldr	r3, [pc, #284]	; (8002aa4 <UART_SetConfig+0x384>)
 8002988:	fba3 2302 	umull	r2, r3, r3, r2
 800298c:	095b      	lsrs	r3, r3, #5
 800298e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	461d      	mov	r5, r3
 8002996:	f04f 0600 	mov.w	r6, #0
 800299a:	46a9      	mov	r9, r5
 800299c:	46b2      	mov	sl, r6
 800299e:	eb19 0309 	adds.w	r3, r9, r9
 80029a2:	eb4a 040a 	adc.w	r4, sl, sl
 80029a6:	4699      	mov	r9, r3
 80029a8:	46a2      	mov	sl, r4
 80029aa:	eb19 0905 	adds.w	r9, r9, r5
 80029ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80029b2:	f04f 0100 	mov.w	r1, #0
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029c6:	4689      	mov	r9, r1
 80029c8:	4692      	mov	sl, r2
 80029ca:	eb19 0005 	adds.w	r0, r9, r5
 80029ce:	eb4a 0106 	adc.w	r1, sl, r6
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	461d      	mov	r5, r3
 80029d8:	f04f 0600 	mov.w	r6, #0
 80029dc:	196b      	adds	r3, r5, r5
 80029de:	eb46 0406 	adc.w	r4, r6, r6
 80029e2:	461a      	mov	r2, r3
 80029e4:	4623      	mov	r3, r4
 80029e6:	f7fd fc13 	bl	8000210 <__aeabi_uldivmod>
 80029ea:	4603      	mov	r3, r0
 80029ec:	460c      	mov	r4, r1
 80029ee:	461a      	mov	r2, r3
 80029f0:	4b2c      	ldr	r3, [pc, #176]	; (8002aa4 <UART_SetConfig+0x384>)
 80029f2:	fba3 1302 	umull	r1, r3, r3, r2
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	2164      	movs	r1, #100	; 0x64
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	3332      	adds	r3, #50	; 0x32
 8002a04:	4a27      	ldr	r2, [pc, #156]	; (8002aa4 <UART_SetConfig+0x384>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a12:	4498      	add	r8, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	461d      	mov	r5, r3
 8002a18:	f04f 0600 	mov.w	r6, #0
 8002a1c:	46a9      	mov	r9, r5
 8002a1e:	46b2      	mov	sl, r6
 8002a20:	eb19 0309 	adds.w	r3, r9, r9
 8002a24:	eb4a 040a 	adc.w	r4, sl, sl
 8002a28:	4699      	mov	r9, r3
 8002a2a:	46a2      	mov	sl, r4
 8002a2c:	eb19 0905 	adds.w	r9, r9, r5
 8002a30:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a34:	f04f 0100 	mov.w	r1, #0
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a48:	4689      	mov	r9, r1
 8002a4a:	4692      	mov	sl, r2
 8002a4c:	eb19 0005 	adds.w	r0, r9, r5
 8002a50:	eb4a 0106 	adc.w	r1, sl, r6
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	461d      	mov	r5, r3
 8002a5a:	f04f 0600 	mov.w	r6, #0
 8002a5e:	196b      	adds	r3, r5, r5
 8002a60:	eb46 0406 	adc.w	r4, r6, r6
 8002a64:	461a      	mov	r2, r3
 8002a66:	4623      	mov	r3, r4
 8002a68:	f7fd fbd2 	bl	8000210 <__aeabi_uldivmod>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	460c      	mov	r4, r1
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <UART_SetConfig+0x384>)
 8002a74:	fba3 1302 	umull	r1, r3, r3, r2
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	2164      	movs	r1, #100	; 0x64
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	3332      	adds	r3, #50	; 0x32
 8002a86:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <UART_SetConfig+0x384>)
 8002a88:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8c:	095b      	lsrs	r3, r3, #5
 8002a8e:	f003 0207 	and.w	r2, r3, #7
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4442      	add	r2, r8
 8002a98:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002a9a:	e1b2      	b.n	8002e02 <UART_SetConfig+0x6e2>
 8002a9c:	40011000 	.word	0x40011000
 8002aa0:	40011400 	.word	0x40011400
 8002aa4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4ad7      	ldr	r2, [pc, #860]	; (8002e0c <UART_SetConfig+0x6ec>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d005      	beq.n	8002abe <UART_SetConfig+0x39e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4ad6      	ldr	r2, [pc, #856]	; (8002e10 <UART_SetConfig+0x6f0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	f040 80d1 	bne.w	8002c60 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002abe:	f7fe ff63 	bl	8001988 <HAL_RCC_GetPCLK2Freq>
 8002ac2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	469a      	mov	sl, r3
 8002ac8:	f04f 0b00 	mov.w	fp, #0
 8002acc:	46d0      	mov	r8, sl
 8002ace:	46d9      	mov	r9, fp
 8002ad0:	eb18 0308 	adds.w	r3, r8, r8
 8002ad4:	eb49 0409 	adc.w	r4, r9, r9
 8002ad8:	4698      	mov	r8, r3
 8002ada:	46a1      	mov	r9, r4
 8002adc:	eb18 080a 	adds.w	r8, r8, sl
 8002ae0:	eb49 090b 	adc.w	r9, r9, fp
 8002ae4:	f04f 0100 	mov.w	r1, #0
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002af0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002af4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002af8:	4688      	mov	r8, r1
 8002afa:	4691      	mov	r9, r2
 8002afc:	eb1a 0508 	adds.w	r5, sl, r8
 8002b00:	eb4b 0609 	adc.w	r6, fp, r9
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	f04f 0400 	mov.w	r4, #0
 8002b16:	0094      	lsls	r4, r2, #2
 8002b18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b1c:	008b      	lsls	r3, r1, #2
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4623      	mov	r3, r4
 8002b22:	4628      	mov	r0, r5
 8002b24:	4631      	mov	r1, r6
 8002b26:	f7fd fb73 	bl	8000210 <__aeabi_uldivmod>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	460c      	mov	r4, r1
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4bb8      	ldr	r3, [pc, #736]	; (8002e14 <UART_SetConfig+0x6f4>)
 8002b32:	fba3 2302 	umull	r2, r3, r3, r2
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	469b      	mov	fp, r3
 8002b40:	f04f 0c00 	mov.w	ip, #0
 8002b44:	46d9      	mov	r9, fp
 8002b46:	46e2      	mov	sl, ip
 8002b48:	eb19 0309 	adds.w	r3, r9, r9
 8002b4c:	eb4a 040a 	adc.w	r4, sl, sl
 8002b50:	4699      	mov	r9, r3
 8002b52:	46a2      	mov	sl, r4
 8002b54:	eb19 090b 	adds.w	r9, r9, fp
 8002b58:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b5c:	f04f 0100 	mov.w	r1, #0
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b70:	4689      	mov	r9, r1
 8002b72:	4692      	mov	sl, r2
 8002b74:	eb1b 0509 	adds.w	r5, fp, r9
 8002b78:	eb4c 060a 	adc.w	r6, ip, sl
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	4619      	mov	r1, r3
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	f04f 0400 	mov.w	r4, #0
 8002b8e:	0094      	lsls	r4, r2, #2
 8002b90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b94:	008b      	lsls	r3, r1, #2
 8002b96:	461a      	mov	r2, r3
 8002b98:	4623      	mov	r3, r4
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	4631      	mov	r1, r6
 8002b9e:	f7fd fb37 	bl	8000210 <__aeabi_uldivmod>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	460c      	mov	r4, r1
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4b9a      	ldr	r3, [pc, #616]	; (8002e14 <UART_SetConfig+0x6f4>)
 8002baa:	fba3 1302 	umull	r1, r3, r3, r2
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	2164      	movs	r1, #100	; 0x64
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	3332      	adds	r3, #50	; 0x32
 8002bbc:	4a95      	ldr	r2, [pc, #596]	; (8002e14 <UART_SetConfig+0x6f4>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bc8:	4498      	add	r8, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	469b      	mov	fp, r3
 8002bce:	f04f 0c00 	mov.w	ip, #0
 8002bd2:	46d9      	mov	r9, fp
 8002bd4:	46e2      	mov	sl, ip
 8002bd6:	eb19 0309 	adds.w	r3, r9, r9
 8002bda:	eb4a 040a 	adc.w	r4, sl, sl
 8002bde:	4699      	mov	r9, r3
 8002be0:	46a2      	mov	sl, r4
 8002be2:	eb19 090b 	adds.w	r9, r9, fp
 8002be6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002bea:	f04f 0100 	mov.w	r1, #0
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bfe:	4689      	mov	r9, r1
 8002c00:	4692      	mov	sl, r2
 8002c02:	eb1b 0509 	adds.w	r5, fp, r9
 8002c06:	eb4c 060a 	adc.w	r6, ip, sl
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	f04f 0400 	mov.w	r4, #0
 8002c1c:	0094      	lsls	r4, r2, #2
 8002c1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c22:	008b      	lsls	r3, r1, #2
 8002c24:	461a      	mov	r2, r3
 8002c26:	4623      	mov	r3, r4
 8002c28:	4628      	mov	r0, r5
 8002c2a:	4631      	mov	r1, r6
 8002c2c:	f7fd faf0 	bl	8000210 <__aeabi_uldivmod>
 8002c30:	4603      	mov	r3, r0
 8002c32:	460c      	mov	r4, r1
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b77      	ldr	r3, [pc, #476]	; (8002e14 <UART_SetConfig+0x6f4>)
 8002c38:	fba3 1302 	umull	r1, r3, r3, r2
 8002c3c:	095b      	lsrs	r3, r3, #5
 8002c3e:	2164      	movs	r1, #100	; 0x64
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	3332      	adds	r3, #50	; 0x32
 8002c4a:	4a72      	ldr	r2, [pc, #456]	; (8002e14 <UART_SetConfig+0x6f4>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	f003 020f 	and.w	r2, r3, #15
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4442      	add	r2, r8
 8002c5c:	609a      	str	r2, [r3, #8]
 8002c5e:	e0d0      	b.n	8002e02 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c60:	f7fe fe7e 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 8002c64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	469a      	mov	sl, r3
 8002c6a:	f04f 0b00 	mov.w	fp, #0
 8002c6e:	46d0      	mov	r8, sl
 8002c70:	46d9      	mov	r9, fp
 8002c72:	eb18 0308 	adds.w	r3, r8, r8
 8002c76:	eb49 0409 	adc.w	r4, r9, r9
 8002c7a:	4698      	mov	r8, r3
 8002c7c:	46a1      	mov	r9, r4
 8002c7e:	eb18 080a 	adds.w	r8, r8, sl
 8002c82:	eb49 090b 	adc.w	r9, r9, fp
 8002c86:	f04f 0100 	mov.w	r1, #0
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c9a:	4688      	mov	r8, r1
 8002c9c:	4691      	mov	r9, r2
 8002c9e:	eb1a 0508 	adds.w	r5, sl, r8
 8002ca2:	eb4b 0609 	adc.w	r6, fp, r9
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4619      	mov	r1, r3
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	f04f 0400 	mov.w	r4, #0
 8002cb8:	0094      	lsls	r4, r2, #2
 8002cba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cbe:	008b      	lsls	r3, r1, #2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4623      	mov	r3, r4
 8002cc4:	4628      	mov	r0, r5
 8002cc6:	4631      	mov	r1, r6
 8002cc8:	f7fd faa2 	bl	8000210 <__aeabi_uldivmod>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	460c      	mov	r4, r1
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b50      	ldr	r3, [pc, #320]	; (8002e14 <UART_SetConfig+0x6f4>)
 8002cd4:	fba3 2302 	umull	r2, r3, r3, r2
 8002cd8:	095b      	lsrs	r3, r3, #5
 8002cda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	469b      	mov	fp, r3
 8002ce2:	f04f 0c00 	mov.w	ip, #0
 8002ce6:	46d9      	mov	r9, fp
 8002ce8:	46e2      	mov	sl, ip
 8002cea:	eb19 0309 	adds.w	r3, r9, r9
 8002cee:	eb4a 040a 	adc.w	r4, sl, sl
 8002cf2:	4699      	mov	r9, r3
 8002cf4:	46a2      	mov	sl, r4
 8002cf6:	eb19 090b 	adds.w	r9, r9, fp
 8002cfa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002cfe:	f04f 0100 	mov.w	r1, #0
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d12:	4689      	mov	r9, r1
 8002d14:	4692      	mov	sl, r2
 8002d16:	eb1b 0509 	adds.w	r5, fp, r9
 8002d1a:	eb4c 060a 	adc.w	r6, ip, sl
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	4619      	mov	r1, r3
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	f04f 0400 	mov.w	r4, #0
 8002d30:	0094      	lsls	r4, r2, #2
 8002d32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d36:	008b      	lsls	r3, r1, #2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4623      	mov	r3, r4
 8002d3c:	4628      	mov	r0, r5
 8002d3e:	4631      	mov	r1, r6
 8002d40:	f7fd fa66 	bl	8000210 <__aeabi_uldivmod>
 8002d44:	4603      	mov	r3, r0
 8002d46:	460c      	mov	r4, r1
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4b32      	ldr	r3, [pc, #200]	; (8002e14 <UART_SetConfig+0x6f4>)
 8002d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	2164      	movs	r1, #100	; 0x64
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	3332      	adds	r3, #50	; 0x32
 8002d5e:	4a2d      	ldr	r2, [pc, #180]	; (8002e14 <UART_SetConfig+0x6f4>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	095b      	lsrs	r3, r3, #5
 8002d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d6a:	4498      	add	r8, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	469b      	mov	fp, r3
 8002d70:	f04f 0c00 	mov.w	ip, #0
 8002d74:	46d9      	mov	r9, fp
 8002d76:	46e2      	mov	sl, ip
 8002d78:	eb19 0309 	adds.w	r3, r9, r9
 8002d7c:	eb4a 040a 	adc.w	r4, sl, sl
 8002d80:	4699      	mov	r9, r3
 8002d82:	46a2      	mov	sl, r4
 8002d84:	eb19 090b 	adds.w	r9, r9, fp
 8002d88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d8c:	f04f 0100 	mov.w	r1, #0
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002da0:	4689      	mov	r9, r1
 8002da2:	4692      	mov	sl, r2
 8002da4:	eb1b 0509 	adds.w	r5, fp, r9
 8002da8:	eb4c 060a 	adc.w	r6, ip, sl
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4619      	mov	r1, r3
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	f04f 0400 	mov.w	r4, #0
 8002dbe:	0094      	lsls	r4, r2, #2
 8002dc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002dc4:	008b      	lsls	r3, r1, #2
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	4623      	mov	r3, r4
 8002dca:	4628      	mov	r0, r5
 8002dcc:	4631      	mov	r1, r6
 8002dce:	f7fd fa1f 	bl	8000210 <__aeabi_uldivmod>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	460c      	mov	r4, r1
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <UART_SetConfig+0x6f4>)
 8002dda:	fba3 1302 	umull	r1, r3, r3, r2
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	2164      	movs	r1, #100	; 0x64
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	3332      	adds	r3, #50	; 0x32
 8002dec:	4a09      	ldr	r2, [pc, #36]	; (8002e14 <UART_SetConfig+0x6f4>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	095b      	lsrs	r3, r3, #5
 8002df4:	f003 020f 	and.w	r2, r3, #15
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4442      	add	r2, r8
 8002dfe:	609a      	str	r2, [r3, #8]
}
 8002e00:	e7ff      	b.n	8002e02 <UART_SetConfig+0x6e2>
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e0c:	40011000 	.word	0x40011000
 8002e10:	40011400 	.word	0x40011400
 8002e14:	51eb851f 	.word	0x51eb851f

08002e18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e2e:	f3ef 8305 	mrs	r3, IPSR
 8002e32:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e34:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10f      	bne.n	8002e5a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e3e:	607b      	str	r3, [r7, #4]
  return(result);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d105      	bne.n	8002e52 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e46:	f3ef 8311 	mrs	r3, BASEPRI
 8002e4a:	603b      	str	r3, [r7, #0]
  return(result);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d007      	beq.n	8002e62 <osKernelInitialize+0x3a>
 8002e52:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <osKernelInitialize+0x64>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d103      	bne.n	8002e62 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002e5a:	f06f 0305 	mvn.w	r3, #5
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	e00c      	b.n	8002e7c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <osKernelInitialize+0x64>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d105      	bne.n	8002e76 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002e6a:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <osKernelInitialize+0x64>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	e002      	b.n	8002e7c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	2000002c 	.word	0x2000002c

08002e90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e96:	f3ef 8305 	mrs	r3, IPSR
 8002e9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10f      	bne.n	8002ec2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea6:	607b      	str	r3, [r7, #4]
  return(result);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d105      	bne.n	8002eba <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002eae:	f3ef 8311 	mrs	r3, BASEPRI
 8002eb2:	603b      	str	r3, [r7, #0]
  return(result);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d007      	beq.n	8002eca <osKernelStart+0x3a>
 8002eba:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <osKernelStart+0x68>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d103      	bne.n	8002eca <osKernelStart+0x3a>
    stat = osErrorISR;
 8002ec2:	f06f 0305 	mvn.w	r3, #5
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	e010      	b.n	8002eec <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002eca:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <osKernelStart+0x68>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d109      	bne.n	8002ee6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002ed2:	f7ff ffa1 	bl	8002e18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002ed6:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <osKernelStart+0x68>)
 8002ed8:	2202      	movs	r2, #2
 8002eda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002edc:	f001 f870 	bl	8003fc0 <vTaskStartScheduler>
      stat = osOK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	e002      	b.n	8002eec <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002eec:	68fb      	ldr	r3, [r7, #12]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	2000002c 	.word	0x2000002c

08002efc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b090      	sub	sp, #64	; 0x40
 8002f00:	af04      	add	r7, sp, #16
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f0c:	f3ef 8305 	mrs	r3, IPSR
 8002f10:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f12:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f040 808f 	bne.w	8003038 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d105      	bne.n	8002f32 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f26:	f3ef 8311 	mrs	r3, BASEPRI
 8002f2a:	617b      	str	r3, [r7, #20]
  return(result);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <osThreadNew+0x3e>
 8002f32:	4b44      	ldr	r3, [pc, #272]	; (8003044 <osThreadNew+0x148>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d07e      	beq.n	8003038 <osThreadNew+0x13c>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d07b      	beq.n	8003038 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002f44:	2318      	movs	r3, #24
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f50:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d045      	beq.n	8002fe4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <osThreadNew+0x6a>
        name = attr->name;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d008      	beq.n	8002f8c <osThreadNew+0x90>
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	2b38      	cmp	r3, #56	; 0x38
 8002f7e:	d805      	bhi.n	8002f8c <osThreadNew+0x90>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <osThreadNew+0x94>
        return (NULL);
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e054      	b.n	800303a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	089b      	lsrs	r3, r3, #2
 8002f9e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00e      	beq.n	8002fc6 <osThreadNew+0xca>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	2b5b      	cmp	r3, #91	; 0x5b
 8002fae:	d90a      	bls.n	8002fc6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d006      	beq.n	8002fc6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <osThreadNew+0xca>
        mem = 1;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	623b      	str	r3, [r7, #32]
 8002fc4:	e010      	b.n	8002fe8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10c      	bne.n	8002fe8 <osThreadNew+0xec>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d108      	bne.n	8002fe8 <osThreadNew+0xec>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d104      	bne.n	8002fe8 <osThreadNew+0xec>
          mem = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	623b      	str	r3, [r7, #32]
 8002fe2:	e001      	b.n	8002fe8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d110      	bne.n	8003010 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ff6:	9202      	str	r2, [sp, #8]
 8002ff8:	9301      	str	r3, [sp, #4]
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003002:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fe09 	bl	8003c1c <xTaskCreateStatic>
 800300a:	4603      	mov	r3, r0
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	e013      	b.n	8003038 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d110      	bne.n	8003038 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003018:	b29a      	uxth	r2, r3
 800301a:	f107 0310 	add.w	r3, r7, #16
 800301e:	9301      	str	r3, [sp, #4]
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fe51 	bl	8003cd0 <xTaskCreate>
 800302e:	4603      	mov	r3, r0
 8003030:	2b01      	cmp	r3, #1
 8003032:	d001      	beq.n	8003038 <osThreadNew+0x13c>
          hTask = NULL;
 8003034:	2300      	movs	r3, #0
 8003036:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003038:	693b      	ldr	r3, [r7, #16]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3730      	adds	r7, #48	; 0x30
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	2000002c 	.word	0x2000002c

08003048 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003050:	f3ef 8305 	mrs	r3, IPSR
 8003054:	613b      	str	r3, [r7, #16]
  return(result);
 8003056:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10f      	bne.n	800307c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800305c:	f3ef 8310 	mrs	r3, PRIMASK
 8003060:	60fb      	str	r3, [r7, #12]
  return(result);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d105      	bne.n	8003074 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003068:	f3ef 8311 	mrs	r3, BASEPRI
 800306c:	60bb      	str	r3, [r7, #8]
  return(result);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <osDelay+0x3c>
 8003074:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <osDelay+0x58>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d103      	bne.n	8003084 <osDelay+0x3c>
    stat = osErrorISR;
 800307c:	f06f 0305 	mvn.w	r3, #5
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	e007      	b.n	8003094 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <osDelay+0x4c>
      vTaskDelay(ticks);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 ff62 	bl	8003f58 <vTaskDelay>
    }
  }

  return (stat);
 8003094:	697b      	ldr	r3, [r7, #20]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	2000002c 	.word	0x2000002c

080030a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4a07      	ldr	r2, [pc, #28]	; (80030d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80030b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	4a06      	ldr	r2, [pc, #24]	; (80030d4 <vApplicationGetIdleTaskMemory+0x30>)
 80030ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2280      	movs	r2, #128	; 0x80
 80030c0:	601a      	str	r2, [r3, #0]
}
 80030c2:	bf00      	nop
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000030 	.word	0x20000030
 80030d4:	2000008c 	.word	0x2000008c

080030d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4a07      	ldr	r2, [pc, #28]	; (8003104 <vApplicationGetTimerTaskMemory+0x2c>)
 80030e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4a06      	ldr	r2, [pc, #24]	; (8003108 <vApplicationGetTimerTaskMemory+0x30>)
 80030ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030f6:	601a      	str	r2, [r3, #0]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	2000028c 	.word	0x2000028c
 8003108:	200002e8 	.word	0x200002e8

0800310c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f103 0208 	add.w	r2, r3, #8
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f04f 32ff 	mov.w	r2, #4294967295
 8003124:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f103 0208 	add.w	r2, r3, #8
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f103 0208 	add.w	r2, r3, #8
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	601a      	str	r2, [r3, #0]
}
 80031a2:	bf00      	nop
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031ae:	b480      	push	{r7}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c4:	d103      	bne.n	80031ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	e00c      	b.n	80031e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3308      	adds	r3, #8
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	e002      	b.n	80031dc <vListInsert+0x2e>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d2f6      	bcs.n	80031d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	601a      	str	r2, [r3, #0]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6892      	ldr	r2, [r2, #8]
 8003236:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6852      	ldr	r2, [r2, #4]
 8003240:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	d103      	bne.n	8003254 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	1e5a      	subs	r2, r3, #1
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d109      	bne.n	800329c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	e7fe      	b.n	800329a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800329c:	f002 f80e 	bl	80052bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a8:	68f9      	ldr	r1, [r7, #12]
 80032aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	441a      	add	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032cc:	3b01      	subs	r3, #1
 80032ce:	68f9      	ldr	r1, [r7, #12]
 80032d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	441a      	add	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	22ff      	movs	r2, #255	; 0xff
 80032e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	22ff      	movs	r2, #255	; 0xff
 80032e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d114      	bne.n	800331c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d01a      	beq.n	8003330 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	3310      	adds	r3, #16
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 f8de 	bl	80044c0 <xTaskRemoveFromEventList>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d012      	beq.n	8003330 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800330a:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <xQueueGenericReset+0xcc>)
 800330c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	e009      	b.n	8003330 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3310      	adds	r3, #16
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fef3 	bl	800310c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	3324      	adds	r3, #36	; 0x24
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff feee 	bl	800310c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003330:	f001 fff2 	bl	8005318 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003334:	2301      	movs	r3, #1
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	e000ed04 	.word	0xe000ed04

08003344 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08e      	sub	sp, #56	; 0x38
 8003348:	af02      	add	r7, sp, #8
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d109      	bne.n	800336c <xQueueGenericCreateStatic+0x28>
 8003358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28
 800336a:	e7fe      	b.n	800336a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <xQueueGenericCreateStatic+0x42>
 8003372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
 8003384:	e7fe      	b.n	8003384 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <xQueueGenericCreateStatic+0x4e>
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <xQueueGenericCreateStatic+0x52>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <xQueueGenericCreateStatic+0x54>
 8003396:	2300      	movs	r3, #0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d109      	bne.n	80033b0 <xQueueGenericCreateStatic+0x6c>
 800339c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a0:	f383 8811 	msr	BASEPRI, r3
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	623b      	str	r3, [r7, #32]
 80033ae:	e7fe      	b.n	80033ae <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <xQueueGenericCreateStatic+0x78>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <xQueueGenericCreateStatic+0x7c>
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <xQueueGenericCreateStatic+0x7e>
 80033c0:	2300      	movs	r3, #0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <xQueueGenericCreateStatic+0x96>
 80033c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ca:	f383 8811 	msr	BASEPRI, r3
 80033ce:	f3bf 8f6f 	isb	sy
 80033d2:	f3bf 8f4f 	dsb	sy
 80033d6:	61fb      	str	r3, [r7, #28]
 80033d8:	e7fe      	b.n	80033d8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80033da:	2350      	movs	r3, #80	; 0x50
 80033dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b50      	cmp	r3, #80	; 0x50
 80033e2:	d009      	beq.n	80033f8 <xQueueGenericCreateStatic+0xb4>
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	e7fe      	b.n	80033f6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80033f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80033fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00d      	beq.n	8003420 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800340c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	4613      	mov	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f805 	bl	800342a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003422:	4618      	mov	r0, r3
 8003424:	3730      	adds	r7, #48	; 0x30
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d103      	bne.n	8003446 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	e002      	b.n	800344c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003458:	2101      	movs	r1, #1
 800345a:	69b8      	ldr	r0, [r7, #24]
 800345c:	f7ff ff0a 	bl	8003274 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	78fa      	ldrb	r2, [r7, #3]
 8003464:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003468:	bf00      	nop
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08e      	sub	sp, #56	; 0x38
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800347e:	2300      	movs	r3, #0
 8003480:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	2b00      	cmp	r3, #0
 800348a:	d109      	bne.n	80034a0 <xQueueGenericSend+0x30>
 800348c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003490:	f383 8811 	msr	BASEPRI, r3
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	62bb      	str	r3, [r7, #40]	; 0x28
 800349e:	e7fe      	b.n	800349e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d103      	bne.n	80034ae <xQueueGenericSend+0x3e>
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <xQueueGenericSend+0x42>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <xQueueGenericSend+0x44>
 80034b2:	2300      	movs	r3, #0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d109      	bne.n	80034cc <xQueueGenericSend+0x5c>
 80034b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ca:	e7fe      	b.n	80034ca <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d103      	bne.n	80034da <xQueueGenericSend+0x6a>
 80034d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <xQueueGenericSend+0x6e>
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <xQueueGenericSend+0x70>
 80034de:	2300      	movs	r3, #0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d109      	bne.n	80034f8 <xQueueGenericSend+0x88>
 80034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	623b      	str	r3, [r7, #32]
 80034f6:	e7fe      	b.n	80034f6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034f8:	f001 f998 	bl	800482c <xTaskGetSchedulerState>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d102      	bne.n	8003508 <xQueueGenericSend+0x98>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <xQueueGenericSend+0x9c>
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <xQueueGenericSend+0x9e>
 800350c:	2300      	movs	r3, #0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <xQueueGenericSend+0xb6>
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	61fb      	str	r3, [r7, #28]
 8003524:	e7fe      	b.n	8003524 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003526:	f001 fec9 	bl	80052bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <xQueueGenericSend+0xcc>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d129      	bne.n	8003590 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	68b9      	ldr	r1, [r7, #8]
 8003540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003542:	f000 f9ff 	bl	8003944 <prvCopyDataToQueue>
 8003546:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	2b00      	cmp	r3, #0
 800354e:	d010      	beq.n	8003572 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003552:	3324      	adds	r3, #36	; 0x24
 8003554:	4618      	mov	r0, r3
 8003556:	f000 ffb3 	bl	80044c0 <xTaskRemoveFromEventList>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d013      	beq.n	8003588 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003560:	4b3f      	ldr	r3, [pc, #252]	; (8003660 <xQueueGenericSend+0x1f0>)
 8003562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	e00a      	b.n	8003588 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003574:	2b00      	cmp	r3, #0
 8003576:	d007      	beq.n	8003588 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003578:	4b39      	ldr	r3, [pc, #228]	; (8003660 <xQueueGenericSend+0x1f0>)
 800357a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003588:	f001 fec6 	bl	8005318 <vPortExitCritical>
				return pdPASS;
 800358c:	2301      	movs	r3, #1
 800358e:	e063      	b.n	8003658 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d103      	bne.n	800359e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003596:	f001 febf 	bl	8005318 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800359a:	2300      	movs	r3, #0
 800359c:	e05c      	b.n	8003658 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d106      	bne.n	80035b2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035a4:	f107 0314 	add.w	r3, r7, #20
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 ffeb 	bl	8004584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035ae:	2301      	movs	r3, #1
 80035b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035b2:	f001 feb1 	bl	8005318 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035b6:	f000 fd67 	bl	8004088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035ba:	f001 fe7f 	bl	80052bc <vPortEnterCritical>
 80035be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035c4:	b25b      	sxtb	r3, r3
 80035c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ca:	d103      	bne.n	80035d4 <xQueueGenericSend+0x164>
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035da:	b25b      	sxtb	r3, r3
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d103      	bne.n	80035ea <xQueueGenericSend+0x17a>
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035ea:	f001 fe95 	bl	8005318 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035ee:	1d3a      	adds	r2, r7, #4
 80035f0:	f107 0314 	add.w	r3, r7, #20
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 ffda 	bl	80045b0 <xTaskCheckForTimeOut>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d124      	bne.n	800364c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003604:	f000 fa96 	bl	8003b34 <prvIsQueueFull>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d018      	beq.n	8003640 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800360e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003610:	3310      	adds	r3, #16
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f000 ff04 	bl	8004424 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800361c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800361e:	f000 fa21 	bl	8003a64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003622:	f000 fd3f 	bl	80040a4 <xTaskResumeAll>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	f47f af7c 	bne.w	8003526 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800362e:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <xQueueGenericSend+0x1f0>)
 8003630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	e772      	b.n	8003526 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003642:	f000 fa0f 	bl	8003a64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003646:	f000 fd2d 	bl	80040a4 <xTaskResumeAll>
 800364a:	e76c      	b.n	8003526 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800364c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800364e:	f000 fa09 	bl	8003a64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003652:	f000 fd27 	bl	80040a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003656:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003658:	4618      	mov	r0, r3
 800365a:	3738      	adds	r7, #56	; 0x38
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	e000ed04 	.word	0xe000ed04

08003664 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08e      	sub	sp, #56	; 0x38
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003678:	2b00      	cmp	r3, #0
 800367a:	d109      	bne.n	8003690 <xQueueGenericSendFromISR+0x2c>
 800367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
 800368e:	e7fe      	b.n	800368e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d103      	bne.n	800369e <xQueueGenericSendFromISR+0x3a>
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <xQueueGenericSendFromISR+0x3e>
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <xQueueGenericSendFromISR+0x40>
 80036a2:	2300      	movs	r3, #0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d109      	bne.n	80036bc <xQueueGenericSendFromISR+0x58>
 80036a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ac:	f383 8811 	msr	BASEPRI, r3
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	623b      	str	r3, [r7, #32]
 80036ba:	e7fe      	b.n	80036ba <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d103      	bne.n	80036ca <xQueueGenericSendFromISR+0x66>
 80036c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <xQueueGenericSendFromISR+0x6a>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <xQueueGenericSendFromISR+0x6c>
 80036ce:	2300      	movs	r3, #0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d109      	bne.n	80036e8 <xQueueGenericSendFromISR+0x84>
 80036d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d8:	f383 8811 	msr	BASEPRI, r3
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	e7fe      	b.n	80036e6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036e8:	f001 fec4 	bl	8005474 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036ec:	f3ef 8211 	mrs	r2, BASEPRI
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	61ba      	str	r2, [r7, #24]
 8003702:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003704:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003706:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800370c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	429a      	cmp	r2, r3
 8003712:	d302      	bcc.n	800371a <xQueueGenericSendFromISR+0xb6>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d12c      	bne.n	8003774 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800372a:	f000 f90b 	bl	8003944 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800372e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003736:	d112      	bne.n	800375e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	2b00      	cmp	r3, #0
 800373e:	d016      	beq.n	800376e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	3324      	adds	r3, #36	; 0x24
 8003744:	4618      	mov	r0, r3
 8003746:	f000 febb 	bl	80044c0 <xTaskRemoveFromEventList>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00e      	beq.n	800376e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00b      	beq.n	800376e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	e007      	b.n	800376e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800375e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003762:	3301      	adds	r3, #1
 8003764:	b2db      	uxtb	r3, r3
 8003766:	b25a      	sxtb	r2, r3
 8003768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800376e:	2301      	movs	r3, #1
 8003770:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003772:	e001      	b.n	8003778 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003774:	2300      	movs	r3, #0
 8003776:	637b      	str	r3, [r7, #52]	; 0x34
 8003778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003784:	4618      	mov	r0, r3
 8003786:	3738      	adds	r7, #56	; 0x38
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08c      	sub	sp, #48	; 0x30
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003798:	2300      	movs	r3, #0
 800379a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80037a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d109      	bne.n	80037ba <xQueueReceive+0x2e>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	623b      	str	r3, [r7, #32]
 80037b8:	e7fe      	b.n	80037b8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d103      	bne.n	80037c8 <xQueueReceive+0x3c>
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <xQueueReceive+0x40>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <xQueueReceive+0x42>
 80037cc:	2300      	movs	r3, #0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <xQueueReceive+0x5a>
 80037d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	e7fe      	b.n	80037e4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037e6:	f001 f821 	bl	800482c <xTaskGetSchedulerState>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d102      	bne.n	80037f6 <xQueueReceive+0x6a>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <xQueueReceive+0x6e>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <xQueueReceive+0x70>
 80037fa:	2300      	movs	r3, #0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <xQueueReceive+0x88>
 8003800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	e7fe      	b.n	8003812 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003814:	f001 fd52 	bl	80052bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01f      	beq.n	8003864 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003828:	f000 f8f6 	bl	8003a18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	1e5a      	subs	r2, r3, #1
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00f      	beq.n	800385c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383e:	3310      	adds	r3, #16
 8003840:	4618      	mov	r0, r3
 8003842:	f000 fe3d 	bl	80044c0 <xTaskRemoveFromEventList>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d007      	beq.n	800385c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800384c:	4b3c      	ldr	r3, [pc, #240]	; (8003940 <xQueueReceive+0x1b4>)
 800384e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800385c:	f001 fd5c 	bl	8005318 <vPortExitCritical>
				return pdPASS;
 8003860:	2301      	movs	r3, #1
 8003862:	e069      	b.n	8003938 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d103      	bne.n	8003872 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800386a:	f001 fd55 	bl	8005318 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800386e:	2300      	movs	r3, #0
 8003870:	e062      	b.n	8003938 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d106      	bne.n	8003886 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003878:	f107 0310 	add.w	r3, r7, #16
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fe81 	bl	8004584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003882:	2301      	movs	r3, #1
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003886:	f001 fd47 	bl	8005318 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800388a:	f000 fbfd 	bl	8004088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800388e:	f001 fd15 	bl	80052bc <vPortEnterCritical>
 8003892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003898:	b25b      	sxtb	r3, r3
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d103      	bne.n	80038a8 <xQueueReceive+0x11c>
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038ae:	b25b      	sxtb	r3, r3
 80038b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b4:	d103      	bne.n	80038be <xQueueReceive+0x132>
 80038b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038be:	f001 fd2b 	bl	8005318 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038c2:	1d3a      	adds	r2, r7, #4
 80038c4:	f107 0310 	add.w	r3, r7, #16
 80038c8:	4611      	mov	r1, r2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fe70 	bl	80045b0 <xTaskCheckForTimeOut>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d123      	bne.n	800391e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038d8:	f000 f916 	bl	8003b08 <prvIsQueueEmpty>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d017      	beq.n	8003912 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	3324      	adds	r3, #36	; 0x24
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	4611      	mov	r1, r2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fd9a 	bl	8004424 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038f2:	f000 f8b7 	bl	8003a64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038f6:	f000 fbd5 	bl	80040a4 <xTaskResumeAll>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d189      	bne.n	8003814 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003900:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <xQueueReceive+0x1b4>)
 8003902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	e780      	b.n	8003814 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003914:	f000 f8a6 	bl	8003a64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003918:	f000 fbc4 	bl	80040a4 <xTaskResumeAll>
 800391c:	e77a      	b.n	8003814 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800391e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003920:	f000 f8a0 	bl	8003a64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003924:	f000 fbbe 	bl	80040a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800392a:	f000 f8ed 	bl	8003b08 <prvIsQueueEmpty>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	f43f af6f 	beq.w	8003814 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003936:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003938:	4618      	mov	r0, r3
 800393a:	3730      	adds	r7, #48	; 0x30
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	e000ed04 	.word	0xe000ed04

08003944 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10d      	bne.n	800397e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d14d      	bne.n	8003a06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 ff7a 	bl	8004868 <xTaskPriorityDisinherit>
 8003974:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	e043      	b.n	8003a06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d119      	bne.n	80039b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6858      	ldr	r0, [r3, #4]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	461a      	mov	r2, r3
 800398e:	68b9      	ldr	r1, [r7, #8]
 8003990:	f002 fb30 	bl	8005ff4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	441a      	add	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d32b      	bcc.n	8003a06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	605a      	str	r2, [r3, #4]
 80039b6:	e026      	b.n	8003a06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	68d8      	ldr	r0, [r3, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	461a      	mov	r2, r3
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	f002 fb16 	bl	8005ff4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	425b      	negs	r3, r3
 80039d2:	441a      	add	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d207      	bcs.n	80039f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	425b      	negs	r3, r3
 80039ee:	441a      	add	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d105      	bne.n	8003a06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003a0e:	697b      	ldr	r3, [r7, #20]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d018      	beq.n	8003a5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	441a      	add	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d303      	bcc.n	8003a4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68d9      	ldr	r1, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	461a      	mov	r2, r3
 8003a56:	6838      	ldr	r0, [r7, #0]
 8003a58:	f002 facc 	bl	8005ff4 <memcpy>
	}
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a6c:	f001 fc26 	bl	80052bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a78:	e011      	b.n	8003a9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d012      	beq.n	8003aa8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3324      	adds	r3, #36	; 0x24
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fd1a 	bl	80044c0 <xTaskRemoveFromEventList>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a92:	f000 fded 	bl	8004670 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	dce9      	bgt.n	8003a7a <prvUnlockQueue+0x16>
 8003aa6:	e000      	b.n	8003aaa <prvUnlockQueue+0x46>
					break;
 8003aa8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	22ff      	movs	r2, #255	; 0xff
 8003aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ab2:	f001 fc31 	bl	8005318 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ab6:	f001 fc01 	bl	80052bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ac0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ac2:	e011      	b.n	8003ae8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d012      	beq.n	8003af2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3310      	adds	r3, #16
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fcf5 	bl	80044c0 <xTaskRemoveFromEventList>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003adc:	f000 fdc8 	bl	8004670 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ae0:	7bbb      	ldrb	r3, [r7, #14]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ae8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	dce9      	bgt.n	8003ac4 <prvUnlockQueue+0x60>
 8003af0:	e000      	b.n	8003af4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003af2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	22ff      	movs	r2, #255	; 0xff
 8003af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003afc:	f001 fc0c 	bl	8005318 <vPortExitCritical>
}
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b10:	f001 fbd4 	bl	80052bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d102      	bne.n	8003b22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	e001      	b.n	8003b26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b26:	f001 fbf7 	bl	8005318 <vPortExitCritical>

	return xReturn;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b3c:	f001 fbbe 	bl	80052bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d102      	bne.n	8003b52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	e001      	b.n	8003b56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b56:	f001 fbdf 	bl	8005318 <vPortExitCritical>

	return xReturn;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	e014      	b.n	8003b9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b74:	4a0e      	ldr	r2, [pc, #56]	; (8003bb0 <vQueueAddToRegistry+0x4c>)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10b      	bne.n	8003b98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b80:	490b      	ldr	r1, [pc, #44]	; (8003bb0 <vQueueAddToRegistry+0x4c>)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b8a:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <vQueueAddToRegistry+0x4c>)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4413      	add	r3, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b96:	e005      	b.n	8003ba4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b07      	cmp	r3, #7
 8003ba2:	d9e7      	bls.n	8003b74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ba4:	bf00      	nop
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	20004938 	.word	0x20004938

08003bb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003bc4:	f001 fb7a 	bl	80052bc <vPortEnterCritical>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bce:	b25b      	sxtb	r3, r3
 8003bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd4:	d103      	bne.n	8003bde <vQueueWaitForMessageRestricted+0x2a>
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003be4:	b25b      	sxtb	r3, r3
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bea:	d103      	bne.n	8003bf4 <vQueueWaitForMessageRestricted+0x40>
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bf4:	f001 fb90 	bl	8005318 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d106      	bne.n	8003c0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	3324      	adds	r3, #36	; 0x24
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	68b9      	ldr	r1, [r7, #8]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fc2f 	bl	800446c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003c0e:	6978      	ldr	r0, [r7, #20]
 8003c10:	f7ff ff28 	bl	8003a64 <prvUnlockQueue>
	}
 8003c14:	bf00      	nop
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08e      	sub	sp, #56	; 0x38
 8003c20:	af04      	add	r7, sp, #16
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d109      	bne.n	8003c44 <xTaskCreateStatic+0x28>
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	623b      	str	r3, [r7, #32]
 8003c42:	e7fe      	b.n	8003c42 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <xTaskCreateStatic+0x42>
 8003c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	61fb      	str	r3, [r7, #28]
 8003c5c:	e7fe      	b.n	8003c5c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c5e:	235c      	movs	r3, #92	; 0x5c
 8003c60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2b5c      	cmp	r3, #92	; 0x5c
 8003c66:	d009      	beq.n	8003c7c <xTaskCreateStatic+0x60>
 8003c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6c:	f383 8811 	msr	BASEPRI, r3
 8003c70:	f3bf 8f6f 	isb	sy
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	e7fe      	b.n	8003c7a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003c7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01e      	beq.n	8003cc2 <xTaskCreateStatic+0xa6>
 8003c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d01b      	beq.n	8003cc2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	9303      	str	r3, [sp, #12]
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	9302      	str	r3, [sp, #8]
 8003ca4:	f107 0314 	add.w	r3, r7, #20
 8003ca8:	9301      	str	r3, [sp, #4]
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f850 	bl	8003d5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cbc:	f000 f8dc 	bl	8003e78 <prvAddNewTaskToReadyList>
 8003cc0:	e001      	b.n	8003cc6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003cc6:	697b      	ldr	r3, [r7, #20]
	}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3728      	adds	r7, #40	; 0x28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08c      	sub	sp, #48	; 0x30
 8003cd4:	af04      	add	r7, sp, #16
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f001 fc03 	bl	80054f0 <pvPortMalloc>
 8003cea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00e      	beq.n	8003d10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003cf2:	205c      	movs	r0, #92	; 0x5c
 8003cf4:	f001 fbfc 	bl	80054f0 <pvPortMalloc>
 8003cf8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	631a      	str	r2, [r3, #48]	; 0x30
 8003d06:	e005      	b.n	8003d14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d08:	6978      	ldr	r0, [r7, #20]
 8003d0a:	f001 fcb3 	bl	8005674 <vPortFree>
 8003d0e:	e001      	b.n	8003d14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d017      	beq.n	8003d4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d22:	88fa      	ldrh	r2, [r7, #6]
 8003d24:	2300      	movs	r3, #0
 8003d26:	9303      	str	r3, [sp, #12]
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	9302      	str	r3, [sp, #8]
 8003d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2e:	9301      	str	r3, [sp, #4]
 8003d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f80e 	bl	8003d5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d3e:	69f8      	ldr	r0, [r7, #28]
 8003d40:	f000 f89a 	bl	8003e78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d44:	2301      	movs	r3, #1
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	e002      	b.n	8003d50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d50:	69bb      	ldr	r3, [r7, #24]
	}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b088      	sub	sp, #32
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	461a      	mov	r2, r3
 8003d72:	21a5      	movs	r1, #165	; 0xa5
 8003d74:	f002 f949 	bl	800600a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d82:	3b01      	subs	r3, #1
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	f023 0307 	bic.w	r3, r3, #7
 8003d90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d009      	beq.n	8003db0 <prvInitialiseNewTask+0x56>
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	e7fe      	b.n	8003dae <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d01f      	beq.n	8003df6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	e012      	b.n	8003de2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	7819      	ldrb	r1, [r3, #0]
 8003dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	4413      	add	r3, r2
 8003dca:	3334      	adds	r3, #52	; 0x34
 8003dcc:	460a      	mov	r2, r1
 8003dce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d006      	beq.n	8003dea <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	3301      	adds	r3, #1
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	2b0f      	cmp	r3, #15
 8003de6:	d9e9      	bls.n	8003dbc <prvInitialiseNewTask+0x62>
 8003de8:	e000      	b.n	8003dec <prvInitialiseNewTask+0x92>
			{
				break;
 8003dea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003df4:	e003      	b.n	8003dfe <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	2b37      	cmp	r3, #55	; 0x37
 8003e02:	d901      	bls.n	8003e08 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e04:	2337      	movs	r3, #55	; 0x37
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	2200      	movs	r2, #0
 8003e18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff f994 	bl	800314c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e26:	3318      	adds	r3, #24
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff f98f 	bl	800314c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e46:	2200      	movs	r2, #0
 8003e48:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	68f9      	ldr	r1, [r7, #12]
 8003e56:	69b8      	ldr	r0, [r7, #24]
 8003e58:	f001 f90c 	bl	8005074 <pxPortInitialiseStack>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e6e:	bf00      	nop
 8003e70:	3720      	adds	r7, #32
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e80:	f001 fa1c 	bl	80052bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e84:	4b2d      	ldr	r3, [pc, #180]	; (8003f3c <prvAddNewTaskToReadyList+0xc4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	4a2c      	ldr	r2, [pc, #176]	; (8003f3c <prvAddNewTaskToReadyList+0xc4>)
 8003e8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e8e:	4b2c      	ldr	r3, [pc, #176]	; (8003f40 <prvAddNewTaskToReadyList+0xc8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e96:	4a2a      	ldr	r2, [pc, #168]	; (8003f40 <prvAddNewTaskToReadyList+0xc8>)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e9c:	4b27      	ldr	r3, [pc, #156]	; (8003f3c <prvAddNewTaskToReadyList+0xc4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d110      	bne.n	8003ec6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ea4:	f000 fc08 	bl	80046b8 <prvInitialiseTaskLists>
 8003ea8:	e00d      	b.n	8003ec6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003eaa:	4b26      	ldr	r3, [pc, #152]	; (8003f44 <prvAddNewTaskToReadyList+0xcc>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d109      	bne.n	8003ec6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003eb2:	4b23      	ldr	r3, [pc, #140]	; (8003f40 <prvAddNewTaskToReadyList+0xc8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d802      	bhi.n	8003ec6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ec0:	4a1f      	ldr	r2, [pc, #124]	; (8003f40 <prvAddNewTaskToReadyList+0xc8>)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ec6:	4b20      	ldr	r3, [pc, #128]	; (8003f48 <prvAddNewTaskToReadyList+0xd0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <prvAddNewTaskToReadyList+0xd0>)
 8003ece:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ed0:	4b1d      	ldr	r3, [pc, #116]	; (8003f48 <prvAddNewTaskToReadyList+0xd0>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003edc:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <prvAddNewTaskToReadyList+0xd4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d903      	bls.n	8003eec <prvAddNewTaskToReadyList+0x74>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	4a18      	ldr	r2, [pc, #96]	; (8003f4c <prvAddNewTaskToReadyList+0xd4>)
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4a15      	ldr	r2, [pc, #84]	; (8003f50 <prvAddNewTaskToReadyList+0xd8>)
 8003efa:	441a      	add	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4619      	mov	r1, r3
 8003f02:	4610      	mov	r0, r2
 8003f04:	f7ff f92f 	bl	8003166 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f08:	f001 fa06 	bl	8005318 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f0c:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <prvAddNewTaskToReadyList+0xcc>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00e      	beq.n	8003f32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <prvAddNewTaskToReadyList+0xc8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d207      	bcs.n	8003f32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f22:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <prvAddNewTaskToReadyList+0xdc>)
 8003f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000bbc 	.word	0x20000bbc
 8003f40:	200006e8 	.word	0x200006e8
 8003f44:	20000bc8 	.word	0x20000bc8
 8003f48:	20000bd8 	.word	0x20000bd8
 8003f4c:	20000bc4 	.word	0x20000bc4
 8003f50:	200006ec 	.word	0x200006ec
 8003f54:	e000ed04 	.word	0xe000ed04

08003f58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f60:	2300      	movs	r3, #0
 8003f62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d016      	beq.n	8003f98 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f6a:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <vTaskDelay+0x60>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d009      	beq.n	8003f86 <vTaskDelay+0x2e>
 8003f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	e7fe      	b.n	8003f84 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003f86:	f000 f87f 	bl	8004088 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fcd7 	bl	8004940 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f92:	f000 f887 	bl	80040a4 <xTaskResumeAll>
 8003f96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d107      	bne.n	8003fae <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003f9e:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <vTaskDelay+0x64>)
 8003fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fae:	bf00      	nop
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000be4 	.word	0x20000be4
 8003fbc:	e000ed04 	.word	0xe000ed04

08003fc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08a      	sub	sp, #40	; 0x28
 8003fc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003fce:	463a      	mov	r2, r7
 8003fd0:	1d39      	adds	r1, r7, #4
 8003fd2:	f107 0308 	add.w	r3, r7, #8
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff f864 	bl	80030a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003fdc:	6839      	ldr	r1, [r7, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	9202      	str	r2, [sp, #8]
 8003fe4:	9301      	str	r3, [sp, #4]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	2300      	movs	r3, #0
 8003fec:	460a      	mov	r2, r1
 8003fee:	4920      	ldr	r1, [pc, #128]	; (8004070 <vTaskStartScheduler+0xb0>)
 8003ff0:	4820      	ldr	r0, [pc, #128]	; (8004074 <vTaskStartScheduler+0xb4>)
 8003ff2:	f7ff fe13 	bl	8003c1c <xTaskCreateStatic>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	4b1f      	ldr	r3, [pc, #124]	; (8004078 <vTaskStartScheduler+0xb8>)
 8003ffa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ffc:	4b1e      	ldr	r3, [pc, #120]	; (8004078 <vTaskStartScheduler+0xb8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004004:	2301      	movs	r3, #1
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	e001      	b.n	800400e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d102      	bne.n	800401a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004014:	f000 fce8 	bl	80049e8 <xTimerCreateTimerTask>
 8004018:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d115      	bne.n	800404c <vTaskStartScheduler+0x8c>
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004032:	4b12      	ldr	r3, [pc, #72]	; (800407c <vTaskStartScheduler+0xbc>)
 8004034:	f04f 32ff 	mov.w	r2, #4294967295
 8004038:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800403a:	4b11      	ldr	r3, [pc, #68]	; (8004080 <vTaskStartScheduler+0xc0>)
 800403c:	2201      	movs	r2, #1
 800403e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004040:	4b10      	ldr	r3, [pc, #64]	; (8004084 <vTaskStartScheduler+0xc4>)
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004046:	f001 f89b 	bl	8005180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800404a:	e00d      	b.n	8004068 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004052:	d109      	bne.n	8004068 <vTaskStartScheduler+0xa8>
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	e7fe      	b.n	8004066 <vTaskStartScheduler+0xa6>
}
 8004068:	bf00      	nop
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	08006034 	.word	0x08006034
 8004074:	08004689 	.word	0x08004689
 8004078:	20000be0 	.word	0x20000be0
 800407c:	20000bdc 	.word	0x20000bdc
 8004080:	20000bc8 	.word	0x20000bc8
 8004084:	20000bc0 	.word	0x20000bc0

08004088 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800408c:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <vTaskSuspendAll+0x18>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3301      	adds	r3, #1
 8004092:	4a03      	ldr	r2, [pc, #12]	; (80040a0 <vTaskSuspendAll+0x18>)
 8004094:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004096:	bf00      	nop
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	20000be4 	.word	0x20000be4

080040a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040b2:	4b41      	ldr	r3, [pc, #260]	; (80041b8 <xTaskResumeAll+0x114>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <xTaskResumeAll+0x2a>
 80040ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	603b      	str	r3, [r7, #0]
 80040cc:	e7fe      	b.n	80040cc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040ce:	f001 f8f5 	bl	80052bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040d2:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <xTaskResumeAll+0x114>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	4a37      	ldr	r2, [pc, #220]	; (80041b8 <xTaskResumeAll+0x114>)
 80040da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040dc:	4b36      	ldr	r3, [pc, #216]	; (80041b8 <xTaskResumeAll+0x114>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d162      	bne.n	80041aa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040e4:	4b35      	ldr	r3, [pc, #212]	; (80041bc <xTaskResumeAll+0x118>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d05e      	beq.n	80041aa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040ec:	e02f      	b.n	800414e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ee:	4b34      	ldr	r3, [pc, #208]	; (80041c0 <xTaskResumeAll+0x11c>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3318      	adds	r3, #24
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff f890 	bl	8003220 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3304      	adds	r3, #4
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff f88b 	bl	8003220 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410e:	4b2d      	ldr	r3, [pc, #180]	; (80041c4 <xTaskResumeAll+0x120>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d903      	bls.n	800411e <xTaskResumeAll+0x7a>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411a:	4a2a      	ldr	r2, [pc, #168]	; (80041c4 <xTaskResumeAll+0x120>)
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4a27      	ldr	r2, [pc, #156]	; (80041c8 <xTaskResumeAll+0x124>)
 800412c:	441a      	add	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3304      	adds	r3, #4
 8004132:	4619      	mov	r1, r3
 8004134:	4610      	mov	r0, r2
 8004136:	f7ff f816 	bl	8003166 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800413e:	4b23      	ldr	r3, [pc, #140]	; (80041cc <xTaskResumeAll+0x128>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	429a      	cmp	r2, r3
 8004146:	d302      	bcc.n	800414e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004148:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <xTaskResumeAll+0x12c>)
 800414a:	2201      	movs	r2, #1
 800414c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800414e:	4b1c      	ldr	r3, [pc, #112]	; (80041c0 <xTaskResumeAll+0x11c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1cb      	bne.n	80040ee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800415c:	f000 fb46 	bl	80047ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004160:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <xTaskResumeAll+0x130>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d010      	beq.n	800418e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800416c:	f000 f846 	bl	80041fc <xTaskIncrementTick>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004176:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <xTaskResumeAll+0x12c>)
 8004178:	2201      	movs	r2, #1
 800417a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3b01      	subs	r3, #1
 8004180:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1f1      	bne.n	800416c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004188:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <xTaskResumeAll+0x130>)
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800418e:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <xTaskResumeAll+0x12c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d009      	beq.n	80041aa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004196:	2301      	movs	r3, #1
 8004198:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800419a:	4b0f      	ldr	r3, [pc, #60]	; (80041d8 <xTaskResumeAll+0x134>)
 800419c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041aa:	f001 f8b5 	bl	8005318 <vPortExitCritical>

	return xAlreadyYielded;
 80041ae:	68bb      	ldr	r3, [r7, #8]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	20000be4 	.word	0x20000be4
 80041bc:	20000bbc 	.word	0x20000bbc
 80041c0:	20000b7c 	.word	0x20000b7c
 80041c4:	20000bc4 	.word	0x20000bc4
 80041c8:	200006ec 	.word	0x200006ec
 80041cc:	200006e8 	.word	0x200006e8
 80041d0:	20000bd0 	.word	0x20000bd0
 80041d4:	20000bcc 	.word	0x20000bcc
 80041d8:	e000ed04 	.word	0xe000ed04

080041dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <xTaskGetTickCount+0x1c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80041e8:	687b      	ldr	r3, [r7, #4]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	20000bc0 	.word	0x20000bc0

080041fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004206:	4b4e      	ldr	r3, [pc, #312]	; (8004340 <xTaskIncrementTick+0x144>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	f040 8088 	bne.w	8004320 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004210:	4b4c      	ldr	r3, [pc, #304]	; (8004344 <xTaskIncrementTick+0x148>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3301      	adds	r3, #1
 8004216:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004218:	4a4a      	ldr	r2, [pc, #296]	; (8004344 <xTaskIncrementTick+0x148>)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d11f      	bne.n	8004264 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004224:	4b48      	ldr	r3, [pc, #288]	; (8004348 <xTaskIncrementTick+0x14c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d009      	beq.n	8004242 <xTaskIncrementTick+0x46>
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	e7fe      	b.n	8004240 <xTaskIncrementTick+0x44>
 8004242:	4b41      	ldr	r3, [pc, #260]	; (8004348 <xTaskIncrementTick+0x14c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	4b40      	ldr	r3, [pc, #256]	; (800434c <xTaskIncrementTick+0x150>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a3e      	ldr	r2, [pc, #248]	; (8004348 <xTaskIncrementTick+0x14c>)
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	4a3e      	ldr	r2, [pc, #248]	; (800434c <xTaskIncrementTick+0x150>)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	4b3e      	ldr	r3, [pc, #248]	; (8004350 <xTaskIncrementTick+0x154>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3301      	adds	r3, #1
 800425c:	4a3c      	ldr	r2, [pc, #240]	; (8004350 <xTaskIncrementTick+0x154>)
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	f000 fac4 	bl	80047ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004264:	4b3b      	ldr	r3, [pc, #236]	; (8004354 <xTaskIncrementTick+0x158>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	429a      	cmp	r2, r3
 800426c:	d349      	bcc.n	8004302 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800426e:	4b36      	ldr	r3, [pc, #216]	; (8004348 <xTaskIncrementTick+0x14c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d104      	bne.n	8004282 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004278:	4b36      	ldr	r3, [pc, #216]	; (8004354 <xTaskIncrementTick+0x158>)
 800427a:	f04f 32ff 	mov.w	r2, #4294967295
 800427e:	601a      	str	r2, [r3, #0]
					break;
 8004280:	e03f      	b.n	8004302 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004282:	4b31      	ldr	r3, [pc, #196]	; (8004348 <xTaskIncrementTick+0x14c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	429a      	cmp	r2, r3
 8004298:	d203      	bcs.n	80042a2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800429a:	4a2e      	ldr	r2, [pc, #184]	; (8004354 <xTaskIncrementTick+0x158>)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80042a0:	e02f      	b.n	8004302 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	3304      	adds	r3, #4
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fe ffba 	bl	8003220 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d004      	beq.n	80042be <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	3318      	adds	r3, #24
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fe ffb1 	bl	8003220 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c2:	4b25      	ldr	r3, [pc, #148]	; (8004358 <xTaskIncrementTick+0x15c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d903      	bls.n	80042d2 <xTaskIncrementTick+0xd6>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ce:	4a22      	ldr	r2, [pc, #136]	; (8004358 <xTaskIncrementTick+0x15c>)
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4a1f      	ldr	r2, [pc, #124]	; (800435c <xTaskIncrementTick+0x160>)
 80042e0:	441a      	add	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	3304      	adds	r3, #4
 80042e6:	4619      	mov	r1, r3
 80042e8:	4610      	mov	r0, r2
 80042ea:	f7fe ff3c 	bl	8003166 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f2:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <xTaskIncrementTick+0x164>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d3b8      	bcc.n	800426e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80042fc:	2301      	movs	r3, #1
 80042fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004300:	e7b5      	b.n	800426e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004302:	4b17      	ldr	r3, [pc, #92]	; (8004360 <xTaskIncrementTick+0x164>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004308:	4914      	ldr	r1, [pc, #80]	; (800435c <xTaskIncrementTick+0x160>)
 800430a:	4613      	mov	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	440b      	add	r3, r1
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d907      	bls.n	800432a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800431a:	2301      	movs	r3, #1
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	e004      	b.n	800432a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004320:	4b10      	ldr	r3, [pc, #64]	; (8004364 <xTaskIncrementTick+0x168>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3301      	adds	r3, #1
 8004326:	4a0f      	ldr	r2, [pc, #60]	; (8004364 <xTaskIncrementTick+0x168>)
 8004328:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800432a:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <xTaskIncrementTick+0x16c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8004332:	2301      	movs	r3, #1
 8004334:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004336:	697b      	ldr	r3, [r7, #20]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20000be4 	.word	0x20000be4
 8004344:	20000bc0 	.word	0x20000bc0
 8004348:	20000b74 	.word	0x20000b74
 800434c:	20000b78 	.word	0x20000b78
 8004350:	20000bd4 	.word	0x20000bd4
 8004354:	20000bdc 	.word	0x20000bdc
 8004358:	20000bc4 	.word	0x20000bc4
 800435c:	200006ec 	.word	0x200006ec
 8004360:	200006e8 	.word	0x200006e8
 8004364:	20000bcc 	.word	0x20000bcc
 8004368:	20000bd0 	.word	0x20000bd0

0800436c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004372:	4b27      	ldr	r3, [pc, #156]	; (8004410 <vTaskSwitchContext+0xa4>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800437a:	4b26      	ldr	r3, [pc, #152]	; (8004414 <vTaskSwitchContext+0xa8>)
 800437c:	2201      	movs	r2, #1
 800437e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004380:	e040      	b.n	8004404 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004382:	4b24      	ldr	r3, [pc, #144]	; (8004414 <vTaskSwitchContext+0xa8>)
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004388:	4b23      	ldr	r3, [pc, #140]	; (8004418 <vTaskSwitchContext+0xac>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	e00f      	b.n	80043b0 <vTaskSwitchContext+0x44>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d109      	bne.n	80043aa <vTaskSwitchContext+0x3e>
 8004396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	607b      	str	r3, [r7, #4]
 80043a8:	e7fe      	b.n	80043a8 <vTaskSwitchContext+0x3c>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	491a      	ldr	r1, [pc, #104]	; (800441c <vTaskSwitchContext+0xb0>)
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0e5      	beq.n	8004390 <vTaskSwitchContext+0x24>
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4a13      	ldr	r2, [pc, #76]	; (800441c <vTaskSwitchContext+0xb0>)
 80043d0:	4413      	add	r3, r2
 80043d2:	60bb      	str	r3, [r7, #8]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	605a      	str	r2, [r3, #4]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	3308      	adds	r3, #8
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d104      	bne.n	80043f4 <vTaskSwitchContext+0x88>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	605a      	str	r2, [r3, #4]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	4a09      	ldr	r2, [pc, #36]	; (8004420 <vTaskSwitchContext+0xb4>)
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	4a06      	ldr	r2, [pc, #24]	; (8004418 <vTaskSwitchContext+0xac>)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6013      	str	r3, [r2, #0]
}
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	20000be4 	.word	0x20000be4
 8004414:	20000bd0 	.word	0x20000bd0
 8004418:	20000bc4 	.word	0x20000bc4
 800441c:	200006ec 	.word	0x200006ec
 8004420:	200006e8 	.word	0x200006e8

08004424 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d109      	bne.n	8004448 <vTaskPlaceOnEventList+0x24>
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	e7fe      	b.n	8004446 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004448:	4b07      	ldr	r3, [pc, #28]	; (8004468 <vTaskPlaceOnEventList+0x44>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3318      	adds	r3, #24
 800444e:	4619      	mov	r1, r3
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7fe feac 	bl	80031ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004456:	2101      	movs	r1, #1
 8004458:	6838      	ldr	r0, [r7, #0]
 800445a:	f000 fa71 	bl	8004940 <prvAddCurrentTaskToDelayedList>
}
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	200006e8 	.word	0x200006e8

0800446c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d109      	bne.n	8004492 <vTaskPlaceOnEventListRestricted+0x26>
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	e7fe      	b.n	8004490 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <vTaskPlaceOnEventListRestricted+0x50>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3318      	adds	r3, #24
 8004498:	4619      	mov	r1, r3
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f7fe fe63 	bl	8003166 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295
 80044aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	68b8      	ldr	r0, [r7, #8]
 80044b0:	f000 fa46 	bl	8004940 <prvAddCurrentTaskToDelayedList>
	}
 80044b4:	bf00      	nop
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	200006e8 	.word	0x200006e8

080044c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <xTaskRemoveFromEventList+0x2a>
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	e7fe      	b.n	80044e8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	3318      	adds	r3, #24
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fe fe96 	bl	8003220 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044f4:	4b1d      	ldr	r3, [pc, #116]	; (800456c <xTaskRemoveFromEventList+0xac>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d11d      	bne.n	8004538 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	3304      	adds	r3, #4
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe fe8d 	bl	8003220 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450a:	4b19      	ldr	r3, [pc, #100]	; (8004570 <xTaskRemoveFromEventList+0xb0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d903      	bls.n	800451a <xTaskRemoveFromEventList+0x5a>
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	4a16      	ldr	r2, [pc, #88]	; (8004570 <xTaskRemoveFromEventList+0xb0>)
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4a13      	ldr	r2, [pc, #76]	; (8004574 <xTaskRemoveFromEventList+0xb4>)
 8004528:	441a      	add	r2, r3
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	3304      	adds	r3, #4
 800452e:	4619      	mov	r1, r3
 8004530:	4610      	mov	r0, r2
 8004532:	f7fe fe18 	bl	8003166 <vListInsertEnd>
 8004536:	e005      	b.n	8004544 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	3318      	adds	r3, #24
 800453c:	4619      	mov	r1, r3
 800453e:	480e      	ldr	r0, [pc, #56]	; (8004578 <xTaskRemoveFromEventList+0xb8>)
 8004540:	f7fe fe11 	bl	8003166 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004548:	4b0c      	ldr	r3, [pc, #48]	; (800457c <xTaskRemoveFromEventList+0xbc>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	429a      	cmp	r2, r3
 8004550:	d905      	bls.n	800455e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004552:	2301      	movs	r3, #1
 8004554:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004556:	4b0a      	ldr	r3, [pc, #40]	; (8004580 <xTaskRemoveFromEventList+0xc0>)
 8004558:	2201      	movs	r2, #1
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	e001      	b.n	8004562 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004562:	697b      	ldr	r3, [r7, #20]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20000be4 	.word	0x20000be4
 8004570:	20000bc4 	.word	0x20000bc4
 8004574:	200006ec 	.word	0x200006ec
 8004578:	20000b7c 	.word	0x20000b7c
 800457c:	200006e8 	.word	0x200006e8
 8004580:	20000bd0 	.word	0x20000bd0

08004584 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <vTaskInternalSetTimeOutState+0x24>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <vTaskInternalSetTimeOutState+0x28>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	605a      	str	r2, [r3, #4]
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	20000bd4 	.word	0x20000bd4
 80045ac:	20000bc0 	.word	0x20000bc0

080045b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d109      	bne.n	80045d4 <xTaskCheckForTimeOut+0x24>
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	e7fe      	b.n	80045d2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d109      	bne.n	80045ee <xTaskCheckForTimeOut+0x3e>
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	e7fe      	b.n	80045ec <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80045ee:	f000 fe65 	bl	80052bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045f2:	4b1d      	ldr	r3, [pc, #116]	; (8004668 <xTaskCheckForTimeOut+0xb8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460a:	d102      	bne.n	8004612 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800460c:	2300      	movs	r3, #0
 800460e:	61fb      	str	r3, [r7, #28]
 8004610:	e023      	b.n	800465a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4b15      	ldr	r3, [pc, #84]	; (800466c <xTaskCheckForTimeOut+0xbc>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d007      	beq.n	800462e <xTaskCheckForTimeOut+0x7e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	429a      	cmp	r2, r3
 8004626:	d302      	bcc.n	800462e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004628:	2301      	movs	r3, #1
 800462a:	61fb      	str	r3, [r7, #28]
 800462c:	e015      	b.n	800465a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	429a      	cmp	r2, r3
 8004636:	d20b      	bcs.n	8004650 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	1ad2      	subs	r2, r2, r3
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff ff9d 	bl	8004584 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
 800464e:	e004      	b.n	800465a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004656:	2301      	movs	r3, #1
 8004658:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800465a:	f000 fe5d 	bl	8005318 <vPortExitCritical>

	return xReturn;
 800465e:	69fb      	ldr	r3, [r7, #28]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3720      	adds	r7, #32
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20000bc0 	.word	0x20000bc0
 800466c:	20000bd4 	.word	0x20000bd4

08004670 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004674:	4b03      	ldr	r3, [pc, #12]	; (8004684 <vTaskMissedYield+0x14>)
 8004676:	2201      	movs	r2, #1
 8004678:	601a      	str	r2, [r3, #0]
}
 800467a:	bf00      	nop
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	20000bd0 	.word	0x20000bd0

08004688 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004690:	f000 f852 	bl	8004738 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004694:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <prvIdleTask+0x28>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d9f9      	bls.n	8004690 <prvIdleTask+0x8>
			{
				taskYIELD();
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <prvIdleTask+0x2c>)
 800469e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046ac:	e7f0      	b.n	8004690 <prvIdleTask+0x8>
 80046ae:	bf00      	nop
 80046b0:	200006ec 	.word	0x200006ec
 80046b4:	e000ed04 	.word	0xe000ed04

080046b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046be:	2300      	movs	r3, #0
 80046c0:	607b      	str	r3, [r7, #4]
 80046c2:	e00c      	b.n	80046de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4a12      	ldr	r2, [pc, #72]	; (8004718 <prvInitialiseTaskLists+0x60>)
 80046d0:	4413      	add	r3, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fe fd1a 	bl	800310c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3301      	adds	r3, #1
 80046dc:	607b      	str	r3, [r7, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b37      	cmp	r3, #55	; 0x37
 80046e2:	d9ef      	bls.n	80046c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046e4:	480d      	ldr	r0, [pc, #52]	; (800471c <prvInitialiseTaskLists+0x64>)
 80046e6:	f7fe fd11 	bl	800310c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046ea:	480d      	ldr	r0, [pc, #52]	; (8004720 <prvInitialiseTaskLists+0x68>)
 80046ec:	f7fe fd0e 	bl	800310c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046f0:	480c      	ldr	r0, [pc, #48]	; (8004724 <prvInitialiseTaskLists+0x6c>)
 80046f2:	f7fe fd0b 	bl	800310c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046f6:	480c      	ldr	r0, [pc, #48]	; (8004728 <prvInitialiseTaskLists+0x70>)
 80046f8:	f7fe fd08 	bl	800310c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046fc:	480b      	ldr	r0, [pc, #44]	; (800472c <prvInitialiseTaskLists+0x74>)
 80046fe:	f7fe fd05 	bl	800310c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004702:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <prvInitialiseTaskLists+0x78>)
 8004704:	4a05      	ldr	r2, [pc, #20]	; (800471c <prvInitialiseTaskLists+0x64>)
 8004706:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <prvInitialiseTaskLists+0x7c>)
 800470a:	4a05      	ldr	r2, [pc, #20]	; (8004720 <prvInitialiseTaskLists+0x68>)
 800470c:	601a      	str	r2, [r3, #0]
}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	200006ec 	.word	0x200006ec
 800471c:	20000b4c 	.word	0x20000b4c
 8004720:	20000b60 	.word	0x20000b60
 8004724:	20000b7c 	.word	0x20000b7c
 8004728:	20000b90 	.word	0x20000b90
 800472c:	20000ba8 	.word	0x20000ba8
 8004730:	20000b74 	.word	0x20000b74
 8004734:	20000b78 	.word	0x20000b78

08004738 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800473e:	e019      	b.n	8004774 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004740:	f000 fdbc 	bl	80052bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004744:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <prvCheckTasksWaitingTermination+0x4c>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3304      	adds	r3, #4
 8004750:	4618      	mov	r0, r3
 8004752:	f7fe fd65 	bl	8003220 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004756:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <prvCheckTasksWaitingTermination+0x50>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3b01      	subs	r3, #1
 800475c:	4a0a      	ldr	r2, [pc, #40]	; (8004788 <prvCheckTasksWaitingTermination+0x50>)
 800475e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004760:	4b0a      	ldr	r3, [pc, #40]	; (800478c <prvCheckTasksWaitingTermination+0x54>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3b01      	subs	r3, #1
 8004766:	4a09      	ldr	r2, [pc, #36]	; (800478c <prvCheckTasksWaitingTermination+0x54>)
 8004768:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800476a:	f000 fdd5 	bl	8005318 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f80e 	bl	8004790 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004774:	4b05      	ldr	r3, [pc, #20]	; (800478c <prvCheckTasksWaitingTermination+0x54>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1e1      	bne.n	8004740 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20000b90 	.word	0x20000b90
 8004788:	20000bbc 	.word	0x20000bbc
 800478c:	20000ba4 	.word	0x20000ba4

08004790 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d108      	bne.n	80047b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 ff64 	bl	8005674 <vPortFree>
				vPortFree( pxTCB );
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 ff61 	bl	8005674 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047b2:	e017      	b.n	80047e4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d103      	bne.n	80047c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 ff58 	bl	8005674 <vPortFree>
	}
 80047c4:	e00e      	b.n	80047e4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d009      	beq.n	80047e4 <prvDeleteTCB+0x54>
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	e7fe      	b.n	80047e2 <prvDeleteTCB+0x52>
	}
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047f2:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <prvResetNextTaskUnblockTime+0x38>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d104      	bne.n	8004806 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047fc:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <prvResetNextTaskUnblockTime+0x3c>)
 80047fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004802:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004804:	e008      	b.n	8004818 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004806:	4b07      	ldr	r3, [pc, #28]	; (8004824 <prvResetNextTaskUnblockTime+0x38>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	4a04      	ldr	r2, [pc, #16]	; (8004828 <prvResetNextTaskUnblockTime+0x3c>)
 8004816:	6013      	str	r3, [r2, #0]
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	20000b74 	.word	0x20000b74
 8004828:	20000bdc 	.word	0x20000bdc

0800482c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004832:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <xTaskGetSchedulerState+0x34>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d102      	bne.n	8004840 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800483a:	2301      	movs	r3, #1
 800483c:	607b      	str	r3, [r7, #4]
 800483e:	e008      	b.n	8004852 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004840:	4b08      	ldr	r3, [pc, #32]	; (8004864 <xTaskGetSchedulerState+0x38>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d102      	bne.n	800484e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004848:	2302      	movs	r3, #2
 800484a:	607b      	str	r3, [r7, #4]
 800484c:	e001      	b.n	8004852 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800484e:	2300      	movs	r3, #0
 8004850:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004852:	687b      	ldr	r3, [r7, #4]
	}
 8004854:	4618      	mov	r0, r3
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	20000bc8 	.word	0x20000bc8
 8004864:	20000be4 	.word	0x20000be4

08004868 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d054      	beq.n	8004928 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800487e:	4b2d      	ldr	r3, [pc, #180]	; (8004934 <xTaskPriorityDisinherit+0xcc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	429a      	cmp	r2, r3
 8004886:	d009      	beq.n	800489c <xTaskPriorityDisinherit+0x34>
 8004888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	e7fe      	b.n	800489a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d109      	bne.n	80048b8 <xTaskPriorityDisinherit+0x50>
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	60bb      	str	r3, [r7, #8]
 80048b6:	e7fe      	b.n	80048b6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048bc:	1e5a      	subs	r2, r3, #1
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d02c      	beq.n	8004928 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d128      	bne.n	8004928 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	3304      	adds	r3, #4
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fe fca0 	bl	8003220 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f8:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <xTaskPriorityDisinherit+0xd0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d903      	bls.n	8004908 <xTaskPriorityDisinherit+0xa0>
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	4a0c      	ldr	r2, [pc, #48]	; (8004938 <xTaskPriorityDisinherit+0xd0>)
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490c:	4613      	mov	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4a09      	ldr	r2, [pc, #36]	; (800493c <xTaskPriorityDisinherit+0xd4>)
 8004916:	441a      	add	r2, r3
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	3304      	adds	r3, #4
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f7fe fc21 	bl	8003166 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004924:	2301      	movs	r3, #1
 8004926:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004928:	697b      	ldr	r3, [r7, #20]
	}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	200006e8 	.word	0x200006e8
 8004938:	20000bc4 	.word	0x20000bc4
 800493c:	200006ec 	.word	0x200006ec

08004940 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800494a:	4b21      	ldr	r3, [pc, #132]	; (80049d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004950:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3304      	adds	r3, #4
 8004956:	4618      	mov	r0, r3
 8004958:	f7fe fc62 	bl	8003220 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004962:	d10a      	bne.n	800497a <prvAddCurrentTaskToDelayedList+0x3a>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800496a:	4b1a      	ldr	r3, [pc, #104]	; (80049d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3304      	adds	r3, #4
 8004970:	4619      	mov	r1, r3
 8004972:	4819      	ldr	r0, [pc, #100]	; (80049d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004974:	f7fe fbf7 	bl	8003166 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004978:	e026      	b.n	80049c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4413      	add	r3, r2
 8004980:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004982:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	429a      	cmp	r2, r3
 8004990:	d209      	bcs.n	80049a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004992:	4b12      	ldr	r3, [pc, #72]	; (80049dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3304      	adds	r3, #4
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f7fe fc05 	bl	80031ae <vListInsert>
}
 80049a4:	e010      	b.n	80049c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049a6:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3304      	adds	r3, #4
 80049b0:	4619      	mov	r1, r3
 80049b2:	4610      	mov	r0, r2
 80049b4:	f7fe fbfb 	bl	80031ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049b8:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d202      	bcs.n	80049c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80049c2:	4a08      	ldr	r2, [pc, #32]	; (80049e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	6013      	str	r3, [r2, #0]
}
 80049c8:	bf00      	nop
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20000bc0 	.word	0x20000bc0
 80049d4:	200006e8 	.word	0x200006e8
 80049d8:	20000ba8 	.word	0x20000ba8
 80049dc:	20000b78 	.word	0x20000b78
 80049e0:	20000b74 	.word	0x20000b74
 80049e4:	20000bdc 	.word	0x20000bdc

080049e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	; 0x28
 80049ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80049f2:	f000 faff 	bl	8004ff4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80049f6:	4b1c      	ldr	r3, [pc, #112]	; (8004a68 <xTimerCreateTimerTask+0x80>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d021      	beq.n	8004a42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a06:	1d3a      	adds	r2, r7, #4
 8004a08:	f107 0108 	add.w	r1, r7, #8
 8004a0c:	f107 030c 	add.w	r3, r7, #12
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fe fb61 	bl	80030d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	9202      	str	r2, [sp, #8]
 8004a1e:	9301      	str	r3, [sp, #4]
 8004a20:	2302      	movs	r3, #2
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	2300      	movs	r3, #0
 8004a26:	460a      	mov	r2, r1
 8004a28:	4910      	ldr	r1, [pc, #64]	; (8004a6c <xTimerCreateTimerTask+0x84>)
 8004a2a:	4811      	ldr	r0, [pc, #68]	; (8004a70 <xTimerCreateTimerTask+0x88>)
 8004a2c:	f7ff f8f6 	bl	8003c1c <xTaskCreateStatic>
 8004a30:	4602      	mov	r2, r0
 8004a32:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <xTimerCreateTimerTask+0x8c>)
 8004a34:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a36:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <xTimerCreateTimerTask+0x8c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d109      	bne.n	8004a5c <xTimerCreateTimerTask+0x74>
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	e7fe      	b.n	8004a5a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004a5c:	697b      	ldr	r3, [r7, #20]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000c18 	.word	0x20000c18
 8004a6c:	0800603c 	.word	0x0800603c
 8004a70:	08004ba9 	.word	0x08004ba9
 8004a74:	20000c1c 	.word	0x20000c1c

08004a78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08a      	sub	sp, #40	; 0x28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d109      	bne.n	8004aa4 <xTimerGenericCommand+0x2c>
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	623b      	str	r3, [r7, #32]
 8004aa2:	e7fe      	b.n	8004aa2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004aa4:	4b19      	ldr	r3, [pc, #100]	; (8004b0c <xTimerGenericCommand+0x94>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d02a      	beq.n	8004b02 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b05      	cmp	r3, #5
 8004abc:	dc18      	bgt.n	8004af0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004abe:	f7ff feb5 	bl	800482c <xTaskGetSchedulerState>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d109      	bne.n	8004adc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ac8:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <xTimerGenericCommand+0x94>)
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	f107 0110 	add.w	r1, r7, #16
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad4:	f7fe fccc 	bl	8003470 <xQueueGenericSend>
 8004ad8:	6278      	str	r0, [r7, #36]	; 0x24
 8004ada:	e012      	b.n	8004b02 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004adc:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <xTimerGenericCommand+0x94>)
 8004ade:	6818      	ldr	r0, [r3, #0]
 8004ae0:	f107 0110 	add.w	r1, r7, #16
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f7fe fcc2 	bl	8003470 <xQueueGenericSend>
 8004aec:	6278      	str	r0, [r7, #36]	; 0x24
 8004aee:	e008      	b.n	8004b02 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004af0:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <xTimerGenericCommand+0x94>)
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	f107 0110 	add.w	r1, r7, #16
 8004af8:	2300      	movs	r3, #0
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	f7fe fdb2 	bl	8003664 <xQueueGenericSendFromISR>
 8004b00:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3728      	adds	r7, #40	; 0x28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20000c18 	.word	0x20000c18

08004b10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b1a:	4b22      	ldr	r3, [pc, #136]	; (8004ba4 <prvProcessExpiredTimer+0x94>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	3304      	adds	r3, #4
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fe fb79 	bl	8003220 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d021      	beq.n	8004b80 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	699a      	ldr	r2, [r3, #24]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	18d1      	adds	r1, r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	6978      	ldr	r0, [r7, #20]
 8004b4a:	f000 f8d1 	bl	8004cf0 <prvInsertTimerInActiveList>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01e      	beq.n	8004b92 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b54:	2300      	movs	r3, #0
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	6978      	ldr	r0, [r7, #20]
 8004b60:	f7ff ff8a 	bl	8004a78 <xTimerGenericCommand>
 8004b64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d112      	bne.n	8004b92 <prvProcessExpiredTimer+0x82>
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	e7fe      	b.n	8004b7e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b86:	f023 0301 	bic.w	r3, r3, #1
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	6978      	ldr	r0, [r7, #20]
 8004b98:	4798      	blx	r3
}
 8004b9a:	bf00      	nop
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000c10 	.word	0x20000c10

08004ba8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bb0:	f107 0308 	add.w	r3, r7, #8
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 f857 	bl	8004c68 <prvGetNextExpireTime>
 8004bba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f803 	bl	8004bcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004bc6:	f000 f8d5 	bl	8004d74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bca:	e7f1      	b.n	8004bb0 <prvTimerTask+0x8>

08004bcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bd6:	f7ff fa57 	bl	8004088 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bda:	f107 0308 	add.w	r3, r7, #8
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 f866 	bl	8004cb0 <prvSampleTimeNow>
 8004be4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d130      	bne.n	8004c4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <prvProcessTimerOrBlockTask+0x3c>
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d806      	bhi.n	8004c08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004bfa:	f7ff fa53 	bl	80040a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004bfe:	68f9      	ldr	r1, [r7, #12]
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff ff85 	bl	8004b10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c06:	e024      	b.n	8004c52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d008      	beq.n	8004c20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c0e:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <prvProcessTimerOrBlockTask+0x90>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <prvProcessTimerOrBlockTask+0x50>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <prvProcessTimerOrBlockTask+0x52>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c20:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <prvProcessTimerOrBlockTask+0x94>)
 8004c22:	6818      	ldr	r0, [r3, #0]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	f7fe ffc1 	bl	8003bb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c32:	f7ff fa37 	bl	80040a4 <xTaskResumeAll>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c3c:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <prvProcessTimerOrBlockTask+0x98>)
 8004c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	f3bf 8f6f 	isb	sy
}
 8004c4c:	e001      	b.n	8004c52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c4e:	f7ff fa29 	bl	80040a4 <xTaskResumeAll>
}
 8004c52:	bf00      	nop
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000c14 	.word	0x20000c14
 8004c60:	20000c18 	.word	0x20000c18
 8004c64:	e000ed04 	.word	0xe000ed04

08004c68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c70:	4b0e      	ldr	r3, [pc, #56]	; (8004cac <prvGetNextExpireTime+0x44>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <prvGetNextExpireTime+0x16>
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	e000      	b.n	8004c80 <prvGetNextExpireTime+0x18>
 8004c7e:	2200      	movs	r2, #0
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c8c:	4b07      	ldr	r3, [pc, #28]	; (8004cac <prvGetNextExpireTime+0x44>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	e001      	b.n	8004c9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	20000c10 	.word	0x20000c10

08004cb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004cb8:	f7ff fa90 	bl	80041dc <xTaskGetTickCount>
 8004cbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004cbe:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <prvSampleTimeNow+0x3c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d205      	bcs.n	8004cd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004cc8:	f000 f930 	bl	8004f2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	e002      	b.n	8004cda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004cda:	4a04      	ldr	r2, [pc, #16]	; (8004cec <prvSampleTimeNow+0x3c>)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000c20 	.word	0x20000c20

08004cf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d812      	bhi.n	8004d3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	1ad2      	subs	r2, r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d302      	bcc.n	8004d2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d24:	2301      	movs	r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e01b      	b.n	8004d62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d2a:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <prvInsertTimerInActiveList+0x7c>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4619      	mov	r1, r3
 8004d34:	4610      	mov	r0, r2
 8004d36:	f7fe fa3a 	bl	80031ae <vListInsert>
 8004d3a:	e012      	b.n	8004d62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d206      	bcs.n	8004d52 <prvInsertTimerInActiveList+0x62>
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d302      	bcc.n	8004d52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	e007      	b.n	8004d62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d52:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <prvInsertTimerInActiveList+0x80>)
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	f7fe fa26 	bl	80031ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d62:	697b      	ldr	r3, [r7, #20]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	20000c14 	.word	0x20000c14
 8004d70:	20000c10 	.word	0x20000c10

08004d74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b08e      	sub	sp, #56	; 0x38
 8004d78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d7a:	e0c6      	b.n	8004f0a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	da17      	bge.n	8004db2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d82:	1d3b      	adds	r3, r7, #4
 8004d84:	3304      	adds	r3, #4
 8004d86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d109      	bne.n	8004da2 <prvProcessReceivedCommands+0x2e>
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	61fb      	str	r3, [r7, #28]
 8004da0:	e7fe      	b.n	8004da0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004da8:	6850      	ldr	r0, [r2, #4]
 8004daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dac:	6892      	ldr	r2, [r2, #8]
 8004dae:	4611      	mov	r1, r2
 8004db0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f2c0 80a7 	blt.w	8004f08 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d004      	beq.n	8004dd0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	3304      	adds	r3, #4
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe fa28 	bl	8003220 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dd0:	463b      	mov	r3, r7
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff ff6c 	bl	8004cb0 <prvSampleTimeNow>
 8004dd8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b09      	cmp	r3, #9
 8004dde:	f200 8094 	bhi.w	8004f0a <prvProcessReceivedCommands+0x196>
 8004de2:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <prvProcessReceivedCommands+0x74>)
 8004de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de8:	08004e11 	.word	0x08004e11
 8004dec:	08004e11 	.word	0x08004e11
 8004df0:	08004e11 	.word	0x08004e11
 8004df4:	08004e83 	.word	0x08004e83
 8004df8:	08004e97 	.word	0x08004e97
 8004dfc:	08004edf 	.word	0x08004edf
 8004e00:	08004e11 	.word	0x08004e11
 8004e04:	08004e11 	.word	0x08004e11
 8004e08:	08004e83 	.word	0x08004e83
 8004e0c:	08004e97 	.word	0x08004e97
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	18d1      	adds	r1, r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e30:	f7ff ff5e 	bl	8004cf0 <prvInsertTimerInActiveList>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d067      	beq.n	8004f0a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d05c      	beq.n	8004f0a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	441a      	add	r2, r3
 8004e58:	2300      	movs	r3, #0
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	2100      	movs	r1, #0
 8004e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e62:	f7ff fe09 	bl	8004a78 <xTimerGenericCommand>
 8004e66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d14d      	bne.n	8004f0a <prvProcessReceivedCommands+0x196>
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	61bb      	str	r3, [r7, #24]
 8004e80:	e7fe      	b.n	8004e80 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e88:	f023 0301 	bic.w	r3, r3, #1
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004e94:	e039      	b.n	8004f0a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e9c:	f043 0301 	orr.w	r3, r3, #1
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <prvProcessReceivedCommands+0x156>
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	e7fe      	b.n	8004ec8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	699a      	ldr	r2, [r3, #24]
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	18d1      	adds	r1, r2, r3
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ed8:	f7ff ff0a 	bl	8004cf0 <prvInsertTimerInActiveList>
					break;
 8004edc:	e015      	b.n	8004f0a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d103      	bne.n	8004ef4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eee:	f000 fbc1 	bl	8005674 <vPortFree>
 8004ef2:	e00a      	b.n	8004f0a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004efa:	f023 0301 	bic.w	r3, r3, #1
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f06:	e000      	b.n	8004f0a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004f08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f0a:	4b07      	ldr	r3, [pc, #28]	; (8004f28 <prvProcessReceivedCommands+0x1b4>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	1d39      	adds	r1, r7, #4
 8004f10:	2200      	movs	r2, #0
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fe fc3a 	bl	800378c <xQueueReceive>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f47f af2e 	bne.w	8004d7c <prvProcessReceivedCommands+0x8>
	}
}
 8004f20:	bf00      	nop
 8004f22:	3730      	adds	r7, #48	; 0x30
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	20000c18 	.word	0x20000c18

08004f2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f32:	e047      	b.n	8004fc4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f34:	4b2d      	ldr	r3, [pc, #180]	; (8004fec <prvSwitchTimerLists+0xc0>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f3e:	4b2b      	ldr	r3, [pc, #172]	; (8004fec <prvSwitchTimerLists+0xc0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7fe f967 	bl	8003220 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d02d      	beq.n	8004fc4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4413      	add	r3, r2
 8004f70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d90e      	bls.n	8004f98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f86:	4b19      	ldr	r3, [pc, #100]	; (8004fec <prvSwitchTimerLists+0xc0>)
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4610      	mov	r0, r2
 8004f92:	f7fe f90c 	bl	80031ae <vListInsert>
 8004f96:	e015      	b.n	8004fc4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f98:	2300      	movs	r3, #0
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f7ff fd68 	bl	8004a78 <xTimerGenericCommand>
 8004fa8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d109      	bne.n	8004fc4 <prvSwitchTimerLists+0x98>
 8004fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	603b      	str	r3, [r7, #0]
 8004fc2:	e7fe      	b.n	8004fc2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fc4:	4b09      	ldr	r3, [pc, #36]	; (8004fec <prvSwitchTimerLists+0xc0>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1b2      	bne.n	8004f34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004fce:	4b07      	ldr	r3, [pc, #28]	; (8004fec <prvSwitchTimerLists+0xc0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004fd4:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <prvSwitchTimerLists+0xc4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a04      	ldr	r2, [pc, #16]	; (8004fec <prvSwitchTimerLists+0xc0>)
 8004fda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004fdc:	4a04      	ldr	r2, [pc, #16]	; (8004ff0 <prvSwitchTimerLists+0xc4>)
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	6013      	str	r3, [r2, #0]
}
 8004fe2:	bf00      	nop
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	20000c10 	.word	0x20000c10
 8004ff0:	20000c14 	.word	0x20000c14

08004ff4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ffa:	f000 f95f 	bl	80052bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ffe:	4b15      	ldr	r3, [pc, #84]	; (8005054 <prvCheckForValidListAndQueue+0x60>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d120      	bne.n	8005048 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005006:	4814      	ldr	r0, [pc, #80]	; (8005058 <prvCheckForValidListAndQueue+0x64>)
 8005008:	f7fe f880 	bl	800310c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800500c:	4813      	ldr	r0, [pc, #76]	; (800505c <prvCheckForValidListAndQueue+0x68>)
 800500e:	f7fe f87d 	bl	800310c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005012:	4b13      	ldr	r3, [pc, #76]	; (8005060 <prvCheckForValidListAndQueue+0x6c>)
 8005014:	4a10      	ldr	r2, [pc, #64]	; (8005058 <prvCheckForValidListAndQueue+0x64>)
 8005016:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005018:	4b12      	ldr	r3, [pc, #72]	; (8005064 <prvCheckForValidListAndQueue+0x70>)
 800501a:	4a10      	ldr	r2, [pc, #64]	; (800505c <prvCheckForValidListAndQueue+0x68>)
 800501c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800501e:	2300      	movs	r3, #0
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	4b11      	ldr	r3, [pc, #68]	; (8005068 <prvCheckForValidListAndQueue+0x74>)
 8005024:	4a11      	ldr	r2, [pc, #68]	; (800506c <prvCheckForValidListAndQueue+0x78>)
 8005026:	2110      	movs	r1, #16
 8005028:	200a      	movs	r0, #10
 800502a:	f7fe f98b 	bl	8003344 <xQueueGenericCreateStatic>
 800502e:	4602      	mov	r2, r0
 8005030:	4b08      	ldr	r3, [pc, #32]	; (8005054 <prvCheckForValidListAndQueue+0x60>)
 8005032:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005034:	4b07      	ldr	r3, [pc, #28]	; (8005054 <prvCheckForValidListAndQueue+0x60>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <prvCheckForValidListAndQueue+0x60>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	490b      	ldr	r1, [pc, #44]	; (8005070 <prvCheckForValidListAndQueue+0x7c>)
 8005042:	4618      	mov	r0, r3
 8005044:	f7fe fd8e 	bl	8003b64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005048:	f000 f966 	bl	8005318 <vPortExitCritical>
}
 800504c:	bf00      	nop
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20000c18 	.word	0x20000c18
 8005058:	20000be8 	.word	0x20000be8
 800505c:	20000bfc 	.word	0x20000bfc
 8005060:	20000c10 	.word	0x20000c10
 8005064:	20000c14 	.word	0x20000c14
 8005068:	20000cc4 	.word	0x20000cc4
 800506c:	20000c24 	.word	0x20000c24
 8005070:	08006044 	.word	0x08006044

08005074 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3b04      	subs	r3, #4
 8005084:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800508c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3b04      	subs	r3, #4
 8005092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f023 0201 	bic.w	r2, r3, #1
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	3b04      	subs	r3, #4
 80050a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80050a4:	4a0c      	ldr	r2, [pc, #48]	; (80050d8 <pxPortInitialiseStack+0x64>)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3b14      	subs	r3, #20
 80050ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3b04      	subs	r3, #4
 80050ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f06f 0202 	mvn.w	r2, #2
 80050c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3b20      	subs	r3, #32
 80050c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050ca:	68fb      	ldr	r3, [r7, #12]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	080050dd 	.word	0x080050dd

080050dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050e2:	2300      	movs	r3, #0
 80050e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050e6:	4b11      	ldr	r3, [pc, #68]	; (800512c <prvTaskExitError+0x50>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ee:	d009      	beq.n	8005104 <prvTaskExitError+0x28>
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	e7fe      	b.n	8005102 <prvTaskExitError+0x26>
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005116:	bf00      	nop
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0fc      	beq.n	8005118 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800511e:	bf00      	nop
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	20000008 	.word	0x20000008

08005130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005130:	4b07      	ldr	r3, [pc, #28]	; (8005150 <pxCurrentTCBConst2>)
 8005132:	6819      	ldr	r1, [r3, #0]
 8005134:	6808      	ldr	r0, [r1, #0]
 8005136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513a:	f380 8809 	msr	PSP, r0
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f04f 0000 	mov.w	r0, #0
 8005146:	f380 8811 	msr	BASEPRI, r0
 800514a:	4770      	bx	lr
 800514c:	f3af 8000 	nop.w

08005150 <pxCurrentTCBConst2>:
 8005150:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop

08005158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005158:	4808      	ldr	r0, [pc, #32]	; (800517c <prvPortStartFirstTask+0x24>)
 800515a:	6800      	ldr	r0, [r0, #0]
 800515c:	6800      	ldr	r0, [r0, #0]
 800515e:	f380 8808 	msr	MSP, r0
 8005162:	f04f 0000 	mov.w	r0, #0
 8005166:	f380 8814 	msr	CONTROL, r0
 800516a:	b662      	cpsie	i
 800516c:	b661      	cpsie	f
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	df00      	svc	0
 8005178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800517a:	bf00      	nop
 800517c:	e000ed08 	.word	0xe000ed08

08005180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005186:	4b44      	ldr	r3, [pc, #272]	; (8005298 <xPortStartScheduler+0x118>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a44      	ldr	r2, [pc, #272]	; (800529c <xPortStartScheduler+0x11c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d109      	bne.n	80051a4 <xPortStartScheduler+0x24>
 8005190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	e7fe      	b.n	80051a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80051a4:	4b3c      	ldr	r3, [pc, #240]	; (8005298 <xPortStartScheduler+0x118>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a3d      	ldr	r2, [pc, #244]	; (80052a0 <xPortStartScheduler+0x120>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d109      	bne.n	80051c2 <xPortStartScheduler+0x42>
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	e7fe      	b.n	80051c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051c2:	4b38      	ldr	r3, [pc, #224]	; (80052a4 <xPortStartScheduler+0x124>)
 80051c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	22ff      	movs	r2, #255	; 0xff
 80051d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	4b30      	ldr	r3, [pc, #192]	; (80052a8 <xPortStartScheduler+0x128>)
 80051e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051ea:	4b30      	ldr	r3, [pc, #192]	; (80052ac <xPortStartScheduler+0x12c>)
 80051ec:	2207      	movs	r2, #7
 80051ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051f0:	e009      	b.n	8005206 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80051f2:	4b2e      	ldr	r3, [pc, #184]	; (80052ac <xPortStartScheduler+0x12c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	4a2c      	ldr	r2, [pc, #176]	; (80052ac <xPortStartScheduler+0x12c>)
 80051fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051fc:	78fb      	ldrb	r3, [r7, #3]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	b2db      	uxtb	r3, r3
 8005204:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005206:	78fb      	ldrb	r3, [r7, #3]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520e:	2b80      	cmp	r3, #128	; 0x80
 8005210:	d0ef      	beq.n	80051f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005212:	4b26      	ldr	r3, [pc, #152]	; (80052ac <xPortStartScheduler+0x12c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f1c3 0307 	rsb	r3, r3, #7
 800521a:	2b04      	cmp	r3, #4
 800521c:	d009      	beq.n	8005232 <xPortStartScheduler+0xb2>
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	e7fe      	b.n	8005230 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005232:	4b1e      	ldr	r3, [pc, #120]	; (80052ac <xPortStartScheduler+0x12c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	021b      	lsls	r3, r3, #8
 8005238:	4a1c      	ldr	r2, [pc, #112]	; (80052ac <xPortStartScheduler+0x12c>)
 800523a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800523c:	4b1b      	ldr	r3, [pc, #108]	; (80052ac <xPortStartScheduler+0x12c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005244:	4a19      	ldr	r2, [pc, #100]	; (80052ac <xPortStartScheduler+0x12c>)
 8005246:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	b2da      	uxtb	r2, r3
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005250:	4b17      	ldr	r3, [pc, #92]	; (80052b0 <xPortStartScheduler+0x130>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a16      	ldr	r2, [pc, #88]	; (80052b0 <xPortStartScheduler+0x130>)
 8005256:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800525a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800525c:	4b14      	ldr	r3, [pc, #80]	; (80052b0 <xPortStartScheduler+0x130>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a13      	ldr	r2, [pc, #76]	; (80052b0 <xPortStartScheduler+0x130>)
 8005262:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005266:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005268:	f000 f8d6 	bl	8005418 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800526c:	4b11      	ldr	r3, [pc, #68]	; (80052b4 <xPortStartScheduler+0x134>)
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005272:	f000 f8f5 	bl	8005460 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005276:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <xPortStartScheduler+0x138>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a0f      	ldr	r2, [pc, #60]	; (80052b8 <xPortStartScheduler+0x138>)
 800527c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005280:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005282:	f7ff ff69 	bl	8005158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005286:	f7ff f871 	bl	800436c <vTaskSwitchContext>
	prvTaskExitError();
 800528a:	f7ff ff27 	bl	80050dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	e000ed00 	.word	0xe000ed00
 800529c:	410fc271 	.word	0x410fc271
 80052a0:	410fc270 	.word	0x410fc270
 80052a4:	e000e400 	.word	0xe000e400
 80052a8:	20000d14 	.word	0x20000d14
 80052ac:	20000d18 	.word	0x20000d18
 80052b0:	e000ed20 	.word	0xe000ed20
 80052b4:	20000008 	.word	0x20000008
 80052b8:	e000ef34 	.word	0xe000ef34

080052bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052d4:	4b0e      	ldr	r3, [pc, #56]	; (8005310 <vPortEnterCritical+0x54>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3301      	adds	r3, #1
 80052da:	4a0d      	ldr	r2, [pc, #52]	; (8005310 <vPortEnterCritical+0x54>)
 80052dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052de:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <vPortEnterCritical+0x54>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d10e      	bne.n	8005304 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052e6:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <vPortEnterCritical+0x58>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d009      	beq.n	8005304 <vPortEnterCritical+0x48>
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	603b      	str	r3, [r7, #0]
 8005302:	e7fe      	b.n	8005302 <vPortEnterCritical+0x46>
	}
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	20000008 	.word	0x20000008
 8005314:	e000ed04 	.word	0xe000ed04

08005318 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800531e:	4b11      	ldr	r3, [pc, #68]	; (8005364 <vPortExitCritical+0x4c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d109      	bne.n	800533a <vPortExitCritical+0x22>
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	607b      	str	r3, [r7, #4]
 8005338:	e7fe      	b.n	8005338 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800533a:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <vPortExitCritical+0x4c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3b01      	subs	r3, #1
 8005340:	4a08      	ldr	r2, [pc, #32]	; (8005364 <vPortExitCritical+0x4c>)
 8005342:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005344:	4b07      	ldr	r3, [pc, #28]	; (8005364 <vPortExitCritical+0x4c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d104      	bne.n	8005356 <vPortExitCritical+0x3e>
 800534c:	2300      	movs	r3, #0
 800534e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000008 	.word	0x20000008
	...

08005370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005370:	f3ef 8009 	mrs	r0, PSP
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	4b15      	ldr	r3, [pc, #84]	; (80053d0 <pxCurrentTCBConst>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	f01e 0f10 	tst.w	lr, #16
 8005380:	bf08      	it	eq
 8005382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800538a:	6010      	str	r0, [r2, #0]
 800538c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005394:	f380 8811 	msr	BASEPRI, r0
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f7fe ffe4 	bl	800436c <vTaskSwitchContext>
 80053a4:	f04f 0000 	mov.w	r0, #0
 80053a8:	f380 8811 	msr	BASEPRI, r0
 80053ac:	bc09      	pop	{r0, r3}
 80053ae:	6819      	ldr	r1, [r3, #0]
 80053b0:	6808      	ldr	r0, [r1, #0]
 80053b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b6:	f01e 0f10 	tst.w	lr, #16
 80053ba:	bf08      	it	eq
 80053bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053c0:	f380 8809 	msr	PSP, r0
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	f3af 8000 	nop.w

080053d0 <pxCurrentTCBConst>:
 80053d0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop

080053d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053f0:	f7fe ff04 	bl	80041fc <xTaskIncrementTick>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053fa:	4b06      	ldr	r3, [pc, #24]	; (8005414 <SysTick_Handler+0x3c>)
 80053fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	2300      	movs	r3, #0
 8005404:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800540c:	bf00      	nop
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	e000ed04 	.word	0xe000ed04

08005418 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800541c:	4b0b      	ldr	r3, [pc, #44]	; (800544c <vPortSetupTimerInterrupt+0x34>)
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005422:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <vPortSetupTimerInterrupt+0x38>)
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <vPortSetupTimerInterrupt+0x3c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a0a      	ldr	r2, [pc, #40]	; (8005458 <vPortSetupTimerInterrupt+0x40>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	099b      	lsrs	r3, r3, #6
 8005434:	4a09      	ldr	r2, [pc, #36]	; (800545c <vPortSetupTimerInterrupt+0x44>)
 8005436:	3b01      	subs	r3, #1
 8005438:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800543a:	4b04      	ldr	r3, [pc, #16]	; (800544c <vPortSetupTimerInterrupt+0x34>)
 800543c:	2207      	movs	r2, #7
 800543e:	601a      	str	r2, [r3, #0]
}
 8005440:	bf00      	nop
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	e000e010 	.word	0xe000e010
 8005450:	e000e018 	.word	0xe000e018
 8005454:	2000000c 	.word	0x2000000c
 8005458:	10624dd3 	.word	0x10624dd3
 800545c:	e000e014 	.word	0xe000e014

08005460 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005460:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005470 <vPortEnableVFP+0x10>
 8005464:	6801      	ldr	r1, [r0, #0]
 8005466:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800546a:	6001      	str	r1, [r0, #0]
 800546c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800546e:	bf00      	nop
 8005470:	e000ed88 	.word	0xe000ed88

08005474 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800547a:	f3ef 8305 	mrs	r3, IPSR
 800547e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b0f      	cmp	r3, #15
 8005484:	d913      	bls.n	80054ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005486:	4a16      	ldr	r2, [pc, #88]	; (80054e0 <vPortValidateInterruptPriority+0x6c>)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005490:	4b14      	ldr	r3, [pc, #80]	; (80054e4 <vPortValidateInterruptPriority+0x70>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	7afa      	ldrb	r2, [r7, #11]
 8005496:	429a      	cmp	r2, r3
 8005498:	d209      	bcs.n	80054ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	607b      	str	r3, [r7, #4]
 80054ac:	e7fe      	b.n	80054ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054ae:	4b0e      	ldr	r3, [pc, #56]	; (80054e8 <vPortValidateInterruptPriority+0x74>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054b6:	4b0d      	ldr	r3, [pc, #52]	; (80054ec <vPortValidateInterruptPriority+0x78>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d909      	bls.n	80054d2 <vPortValidateInterruptPriority+0x5e>
 80054be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	603b      	str	r3, [r7, #0]
 80054d0:	e7fe      	b.n	80054d0 <vPortValidateInterruptPriority+0x5c>
	}
 80054d2:	bf00      	nop
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	e000e3f0 	.word	0xe000e3f0
 80054e4:	20000d14 	.word	0x20000d14
 80054e8:	e000ed0c 	.word	0xe000ed0c
 80054ec:	20000d18 	.word	0x20000d18

080054f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08a      	sub	sp, #40	; 0x28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054fc:	f7fe fdc4 	bl	8004088 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005500:	4b57      	ldr	r3, [pc, #348]	; (8005660 <pvPortMalloc+0x170>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005508:	f000 f90c 	bl	8005724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800550c:	4b55      	ldr	r3, [pc, #340]	; (8005664 <pvPortMalloc+0x174>)
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4013      	ands	r3, r2
 8005514:	2b00      	cmp	r3, #0
 8005516:	f040 808c 	bne.w	8005632 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01c      	beq.n	800555a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005520:	2208      	movs	r2, #8
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4413      	add	r3, r2
 8005526:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	2b00      	cmp	r3, #0
 8005530:	d013      	beq.n	800555a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f023 0307 	bic.w	r3, r3, #7
 8005538:	3308      	adds	r3, #8
 800553a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	2b00      	cmp	r3, #0
 8005544:	d009      	beq.n	800555a <pvPortMalloc+0x6a>
 8005546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e7fe      	b.n	8005558 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d068      	beq.n	8005632 <pvPortMalloc+0x142>
 8005560:	4b41      	ldr	r3, [pc, #260]	; (8005668 <pvPortMalloc+0x178>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	429a      	cmp	r2, r3
 8005568:	d863      	bhi.n	8005632 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800556a:	4b40      	ldr	r3, [pc, #256]	; (800566c <pvPortMalloc+0x17c>)
 800556c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800556e:	4b3f      	ldr	r3, [pc, #252]	; (800566c <pvPortMalloc+0x17c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005574:	e004      	b.n	8005580 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	429a      	cmp	r2, r3
 8005588:	d903      	bls.n	8005592 <pvPortMalloc+0xa2>
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f1      	bne.n	8005576 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005592:	4b33      	ldr	r3, [pc, #204]	; (8005660 <pvPortMalloc+0x170>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005598:	429a      	cmp	r2, r3
 800559a:	d04a      	beq.n	8005632 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2208      	movs	r2, #8
 80055a2:	4413      	add	r3, r2
 80055a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	1ad2      	subs	r2, r2, r3
 80055b6:	2308      	movs	r3, #8
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d91e      	bls.n	80055fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4413      	add	r3, r2
 80055c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d009      	beq.n	80055e4 <pvPortMalloc+0xf4>
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	613b      	str	r3, [r7, #16]
 80055e2:	e7fe      	b.n	80055e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	1ad2      	subs	r2, r2, r3
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055f6:	69b8      	ldr	r0, [r7, #24]
 80055f8:	f000 f8f6 	bl	80057e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055fc:	4b1a      	ldr	r3, [pc, #104]	; (8005668 <pvPortMalloc+0x178>)
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	4a18      	ldr	r2, [pc, #96]	; (8005668 <pvPortMalloc+0x178>)
 8005608:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800560a:	4b17      	ldr	r3, [pc, #92]	; (8005668 <pvPortMalloc+0x178>)
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	4b18      	ldr	r3, [pc, #96]	; (8005670 <pvPortMalloc+0x180>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	429a      	cmp	r2, r3
 8005614:	d203      	bcs.n	800561e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005616:	4b14      	ldr	r3, [pc, #80]	; (8005668 <pvPortMalloc+0x178>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a15      	ldr	r2, [pc, #84]	; (8005670 <pvPortMalloc+0x180>)
 800561c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	4b10      	ldr	r3, [pc, #64]	; (8005664 <pvPortMalloc+0x174>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	431a      	orrs	r2, r3
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005632:	f7fe fd37 	bl	80040a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	2b00      	cmp	r3, #0
 800563e:	d009      	beq.n	8005654 <pvPortMalloc+0x164>
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	e7fe      	b.n	8005652 <pvPortMalloc+0x162>
	return pvReturn;
 8005654:	69fb      	ldr	r3, [r7, #28]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3728      	adds	r7, #40	; 0x28
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20004924 	.word	0x20004924
 8005664:	20004930 	.word	0x20004930
 8005668:	20004928 	.word	0x20004928
 800566c:	2000491c 	.word	0x2000491c
 8005670:	2000492c 	.word	0x2000492c

08005674 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d046      	beq.n	8005714 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005686:	2308      	movs	r3, #8
 8005688:	425b      	negs	r3, r3
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4413      	add	r3, r2
 800568e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	4b20      	ldr	r3, [pc, #128]	; (800571c <vPortFree+0xa8>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4013      	ands	r3, r2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d109      	bne.n	80056b6 <vPortFree+0x42>
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	e7fe      	b.n	80056b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d009      	beq.n	80056d2 <vPortFree+0x5e>
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	60bb      	str	r3, [r7, #8]
 80056d0:	e7fe      	b.n	80056d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	4b11      	ldr	r3, [pc, #68]	; (800571c <vPortFree+0xa8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4013      	ands	r3, r2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d019      	beq.n	8005714 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d115      	bne.n	8005714 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	4b0b      	ldr	r3, [pc, #44]	; (800571c <vPortFree+0xa8>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	43db      	mvns	r3, r3
 80056f2:	401a      	ands	r2, r3
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056f8:	f7fe fcc6 	bl	8004088 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	4b07      	ldr	r3, [pc, #28]	; (8005720 <vPortFree+0xac>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4413      	add	r3, r2
 8005706:	4a06      	ldr	r2, [pc, #24]	; (8005720 <vPortFree+0xac>)
 8005708:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800570a:	6938      	ldr	r0, [r7, #16]
 800570c:	f000 f86c 	bl	80057e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005710:	f7fe fcc8 	bl	80040a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005714:	bf00      	nop
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	20004930 	.word	0x20004930
 8005720:	20004928 	.word	0x20004928

08005724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800572a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800572e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005730:	4b27      	ldr	r3, [pc, #156]	; (80057d0 <prvHeapInit+0xac>)
 8005732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00c      	beq.n	8005758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3307      	adds	r3, #7
 8005742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0307 	bic.w	r3, r3, #7
 800574a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	4a1f      	ldr	r2, [pc, #124]	; (80057d0 <prvHeapInit+0xac>)
 8005754:	4413      	add	r3, r2
 8005756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800575c:	4a1d      	ldr	r2, [pc, #116]	; (80057d4 <prvHeapInit+0xb0>)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005762:	4b1c      	ldr	r3, [pc, #112]	; (80057d4 <prvHeapInit+0xb0>)
 8005764:	2200      	movs	r2, #0
 8005766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	4413      	add	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005770:	2208      	movs	r2, #8
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	1a9b      	subs	r3, r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0307 	bic.w	r3, r3, #7
 800577e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4a15      	ldr	r2, [pc, #84]	; (80057d8 <prvHeapInit+0xb4>)
 8005784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005786:	4b14      	ldr	r3, [pc, #80]	; (80057d8 <prvHeapInit+0xb4>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2200      	movs	r2, #0
 800578c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800578e:	4b12      	ldr	r3, [pc, #72]	; (80057d8 <prvHeapInit+0xb4>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	1ad2      	subs	r2, r2, r3
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057a4:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <prvHeapInit+0xb4>)
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	4a0a      	ldr	r2, [pc, #40]	; (80057dc <prvHeapInit+0xb8>)
 80057b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	4a09      	ldr	r2, [pc, #36]	; (80057e0 <prvHeapInit+0xbc>)
 80057ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057bc:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <prvHeapInit+0xc0>)
 80057be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80057c2:	601a      	str	r2, [r3, #0]
}
 80057c4:	bf00      	nop
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	20000d1c 	.word	0x20000d1c
 80057d4:	2000491c 	.word	0x2000491c
 80057d8:	20004924 	.word	0x20004924
 80057dc:	2000492c 	.word	0x2000492c
 80057e0:	20004928 	.word	0x20004928
 80057e4:	20004930 	.word	0x20004930

080057e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057f0:	4b28      	ldr	r3, [pc, #160]	; (8005894 <prvInsertBlockIntoFreeList+0xac>)
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	e002      	b.n	80057fc <prvInsertBlockIntoFreeList+0x14>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	429a      	cmp	r2, r3
 8005804:	d8f7      	bhi.n	80057f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	4413      	add	r3, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	429a      	cmp	r2, r3
 8005816:	d108      	bne.n	800582a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	441a      	add	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	441a      	add	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d118      	bne.n	8005870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	4b15      	ldr	r3, [pc, #84]	; (8005898 <prvInsertBlockIntoFreeList+0xb0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	429a      	cmp	r2, r3
 8005848:	d00d      	beq.n	8005866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	441a      	add	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	e008      	b.n	8005878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005866:	4b0c      	ldr	r3, [pc, #48]	; (8005898 <prvInsertBlockIntoFreeList+0xb0>)
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	e003      	b.n	8005878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	429a      	cmp	r2, r3
 800587e:	d002      	beq.n	8005886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005886:	bf00      	nop
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	2000491c 	.word	0x2000491c
 8005898:	20004924 	.word	0x20004924

0800589c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80058a0:	f7fa fe36 	bl	8000510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80058a4:	f000 f824 	bl	80058f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80058a8:	f000 f8ee 	bl	8005a88 <MX_GPIO_Init>
  MX_CAN1_Init();
 80058ac:	f000 f88c 	bl	80059c8 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 80058b0:	f000 f8c0 	bl	8005a34 <MX_USART2_UART_Init>
//  sFilterConfig.FilterScale				= CAN_FILTERSCALE_32BIT; //set filter scale
//  sFilterConfig.FilterActivation		= ENABLE;
//
//
//  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig); //configure CAN filter
  CAN_Filter_Config();
 80058b4:	f000 f94a 	bl	8005b4c <CAN_Filter_Config>
  // Start CAN
  HAL_CAN_Start(&hcan1);
 80058b8:	4809      	ldr	r0, [pc, #36]	; (80058e0 <main+0x44>)
 80058ba:	f7fb f847 	bl	800094c <HAL_CAN_Start>

  // Activate interrupts for CAN Rx
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80058be:	2102      	movs	r1, #2
 80058c0:	4807      	ldr	r0, [pc, #28]	; (80058e0 <main+0x44>)
 80058c2:	f7fb fa74 	bl	8000dae <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80058c6:	f7fd faaf 	bl	8002e28 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80058ca:	4a06      	ldr	r2, [pc, #24]	; (80058e4 <main+0x48>)
 80058cc:	2100      	movs	r1, #0
 80058ce:	4806      	ldr	r0, [pc, #24]	; (80058e8 <main+0x4c>)
 80058d0:	f7fd fb14 	bl	8002efc <osThreadNew>
 80058d4:	4602      	mov	r2, r0
 80058d6:	4b05      	ldr	r3, [pc, #20]	; (80058ec <main+0x50>)
 80058d8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80058da:	f7fd fad9 	bl	8002e90 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80058de:	e7fe      	b.n	80058de <main+0x42>
 80058e0:	20004a20 	.word	0x20004a20
 80058e4:	08006058 	.word	0x08006058
 80058e8:	08005ba1 	.word	0x08005ba1
 80058ec:	200049a0 	.word	0x200049a0

080058f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b094      	sub	sp, #80	; 0x50
 80058f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80058f6:	f107 031c 	add.w	r3, r7, #28
 80058fa:	2234      	movs	r2, #52	; 0x34
 80058fc:	2100      	movs	r1, #0
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 fb83 	bl	800600a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005904:	f107 0308 	add.w	r3, r7, #8
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	605a      	str	r2, [r3, #4]
 800590e:	609a      	str	r2, [r3, #8]
 8005910:	60da      	str	r2, [r3, #12]
 8005912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005914:	2300      	movs	r3, #0
 8005916:	607b      	str	r3, [r7, #4]
 8005918:	4b29      	ldr	r3, [pc, #164]	; (80059c0 <SystemClock_Config+0xd0>)
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	4a28      	ldr	r2, [pc, #160]	; (80059c0 <SystemClock_Config+0xd0>)
 800591e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005922:	6413      	str	r3, [r2, #64]	; 0x40
 8005924:	4b26      	ldr	r3, [pc, #152]	; (80059c0 <SystemClock_Config+0xd0>)
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800592c:	607b      	str	r3, [r7, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005930:	2300      	movs	r3, #0
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	4b23      	ldr	r3, [pc, #140]	; (80059c4 <SystemClock_Config+0xd4>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800593c:	4a21      	ldr	r2, [pc, #132]	; (80059c4 <SystemClock_Config+0xd4>)
 800593e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	4b1f      	ldr	r3, [pc, #124]	; (80059c4 <SystemClock_Config+0xd4>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800594c:	603b      	str	r3, [r7, #0]
 800594e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005950:	2302      	movs	r3, #2
 8005952:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005954:	2301      	movs	r3, #1
 8005956:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005958:	2310      	movs	r3, #16
 800595a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800595c:	2302      	movs	r3, #2
 800595e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005960:	2300      	movs	r3, #0
 8005962:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8005964:	2310      	movs	r3, #16
 8005966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005968:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800596c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800596e:	2308      	movs	r3, #8
 8005970:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005972:	2302      	movs	r3, #2
 8005974:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005976:	2302      	movs	r3, #2
 8005978:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800597a:	f107 031c 	add.w	r3, r7, #28
 800597e:	4618      	mov	r0, r3
 8005980:	f7fc f9e8 	bl	8001d54 <HAL_RCC_OscConfig>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800598a:	f000 f973 	bl	8005c74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800598e:	230f      	movs	r3, #15
 8005990:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005992:	2302      	movs	r3, #2
 8005994:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005996:	2300      	movs	r3, #0
 8005998:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800599e:	2300      	movs	r3, #0
 80059a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80059a2:	f107 0308 	add.w	r3, r7, #8
 80059a6:	2101      	movs	r1, #1
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fb fee7 	bl	800177c <HAL_RCC_ClockConfig>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80059b4:	f000 f95e 	bl	8005c74 <Error_Handler>
  }
}
 80059b8:	bf00      	nop
 80059ba:	3750      	adds	r7, #80	; 0x50
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40023800 	.word	0x40023800
 80059c4:	40007000 	.word	0x40007000

080059c8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80059cc:	4b17      	ldr	r3, [pc, #92]	; (8005a2c <MX_CAN1_Init+0x64>)
 80059ce:	4a18      	ldr	r2, [pc, #96]	; (8005a30 <MX_CAN1_Init+0x68>)
 80059d0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80059d2:	4b16      	ldr	r3, [pc, #88]	; (8005a2c <MX_CAN1_Init+0x64>)
 80059d4:	2206      	movs	r2, #6
 80059d6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80059d8:	4b14      	ldr	r3, [pc, #80]	; (8005a2c <MX_CAN1_Init+0x64>)
 80059da:	2200      	movs	r2, #0
 80059dc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80059de:	4b13      	ldr	r3, [pc, #76]	; (8005a2c <MX_CAN1_Init+0x64>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80059e4:	4b11      	ldr	r3, [pc, #68]	; (8005a2c <MX_CAN1_Init+0x64>)
 80059e6:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80059ea:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80059ec:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <MX_CAN1_Init+0x64>)
 80059ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80059f2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80059f4:	4b0d      	ldr	r3, [pc, #52]	; (8005a2c <MX_CAN1_Init+0x64>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80059fa:	4b0c      	ldr	r3, [pc, #48]	; (8005a2c <MX_CAN1_Init+0x64>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8005a00:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <MX_CAN1_Init+0x64>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8005a06:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <MX_CAN1_Init+0x64>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8005a0c:	4b07      	ldr	r3, [pc, #28]	; (8005a2c <MX_CAN1_Init+0x64>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8005a12:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <MX_CAN1_Init+0x64>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005a18:	4804      	ldr	r0, [pc, #16]	; (8005a2c <MX_CAN1_Init+0x64>)
 8005a1a:	f7fa fdbb 	bl	8000594 <HAL_CAN_Init>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8005a24:	f000 f926 	bl	8005c74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8005a28:	bf00      	nop
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	20004a20 	.word	0x20004a20
 8005a30:	40006400 	.word	0x40006400

08005a34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005a38:	4b11      	ldr	r3, [pc, #68]	; (8005a80 <MX_USART2_UART_Init+0x4c>)
 8005a3a:	4a12      	ldr	r2, [pc, #72]	; (8005a84 <MX_USART2_UART_Init+0x50>)
 8005a3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005a3e:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <MX_USART2_UART_Init+0x4c>)
 8005a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005a46:	4b0e      	ldr	r3, [pc, #56]	; (8005a80 <MX_USART2_UART_Init+0x4c>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005a4c:	4b0c      	ldr	r3, [pc, #48]	; (8005a80 <MX_USART2_UART_Init+0x4c>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005a52:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <MX_USART2_UART_Init+0x4c>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005a58:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <MX_USART2_UART_Init+0x4c>)
 8005a5a:	220c      	movs	r2, #12
 8005a5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a5e:	4b08      	ldr	r3, [pc, #32]	; (8005a80 <MX_USART2_UART_Init+0x4c>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a64:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <MX_USART2_UART_Init+0x4c>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005a6a:	4805      	ldr	r0, [pc, #20]	; (8005a80 <MX_USART2_UART_Init+0x4c>)
 8005a6c:	f7fc fe0a 	bl	8002684 <HAL_UART_Init>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005a76:	f000 f8fd 	bl	8005c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005a7a:	bf00      	nop
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	200049e0 	.word	0x200049e0
 8005a84:	40004400 	.word	0x40004400

08005a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a8e:	f107 030c 	add.w	r3, r7, #12
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	605a      	str	r2, [r3, #4]
 8005a98:	609a      	str	r2, [r3, #8]
 8005a9a:	60da      	str	r2, [r3, #12]
 8005a9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60bb      	str	r3, [r7, #8]
 8005aa2:	4b26      	ldr	r3, [pc, #152]	; (8005b3c <MX_GPIO_Init+0xb4>)
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa6:	4a25      	ldr	r2, [pc, #148]	; (8005b3c <MX_GPIO_Init+0xb4>)
 8005aa8:	f043 0304 	orr.w	r3, r3, #4
 8005aac:	6313      	str	r3, [r2, #48]	; 0x30
 8005aae:	4b23      	ldr	r3, [pc, #140]	; (8005b3c <MX_GPIO_Init+0xb4>)
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	f003 0304 	and.w	r3, r3, #4
 8005ab6:	60bb      	str	r3, [r7, #8]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005aba:	2300      	movs	r3, #0
 8005abc:	607b      	str	r3, [r7, #4]
 8005abe:	4b1f      	ldr	r3, [pc, #124]	; (8005b3c <MX_GPIO_Init+0xb4>)
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac2:	4a1e      	ldr	r2, [pc, #120]	; (8005b3c <MX_GPIO_Init+0xb4>)
 8005ac4:	f043 0301 	orr.w	r3, r3, #1
 8005ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8005aca:	4b1c      	ldr	r3, [pc, #112]	; (8005b3c <MX_GPIO_Init+0xb4>)
 8005acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	607b      	str	r3, [r7, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	603b      	str	r3, [r7, #0]
 8005ada:	4b18      	ldr	r3, [pc, #96]	; (8005b3c <MX_GPIO_Init+0xb4>)
 8005adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ade:	4a17      	ldr	r2, [pc, #92]	; (8005b3c <MX_GPIO_Init+0xb4>)
 8005ae0:	f043 0302 	orr.w	r3, r3, #2
 8005ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ae6:	4b15      	ldr	r3, [pc, #84]	; (8005b3c <MX_GPIO_Init+0xb4>)
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8005af2:	2200      	movs	r2, #0
 8005af4:	2120      	movs	r1, #32
 8005af6:	4812      	ldr	r0, [pc, #72]	; (8005b40 <MX_GPIO_Init+0xb8>)
 8005af8:	f7fb fe26 	bl	8001748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005b02:	4b10      	ldr	r3, [pc, #64]	; (8005b44 <MX_GPIO_Init+0xbc>)
 8005b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005b0a:	f107 030c 	add.w	r3, r7, #12
 8005b0e:	4619      	mov	r1, r3
 8005b10:	480d      	ldr	r0, [pc, #52]	; (8005b48 <MX_GPIO_Init+0xc0>)
 8005b12:	f7fb fc87 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8005b16:	2320      	movs	r3, #32
 8005b18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b22:	2300      	movs	r3, #0
 8005b24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8005b26:	f107 030c 	add.w	r3, r7, #12
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4804      	ldr	r0, [pc, #16]	; (8005b40 <MX_GPIO_Init+0xb8>)
 8005b2e:	f7fb fc79 	bl	8001424 <HAL_GPIO_Init>

}
 8005b32:	bf00      	nop
 8005b34:	3720      	adds	r7, #32
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	40020000 	.word	0x40020000
 8005b44:	10210000 	.word	0x10210000
 8005b48:	40020800 	.word	0x40020800

08005b4c <CAN_Filter_Config>:

/* USER CODE BEGIN 4 */
void CAN_Filter_Config(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08a      	sub	sp, #40	; 0x28
 8005b50:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;

	can1_filter_init.FilterActivation = ENABLE;
 8005b52:	2301      	movs	r3, #1
 8005b54:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank  = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 8005b62:	2300      	movs	r3, #0
 8005b64:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0X01C0;
 8005b66:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8005b6a:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8005b70:	2300      	movs	r3, #0
 8005b72:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8005b74:	2301      	movs	r3, #1
 8005b76:	61fb      	str	r3, [r7, #28]

	if( HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init) != HAL_OK)
 8005b78:	463b      	mov	r3, r7
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4805      	ldr	r0, [pc, #20]	; (8005b94 <CAN_Filter_Config+0x48>)
 8005b7e:	f7fa fe05 	bl	800078c <HAL_CAN_ConfigFilter>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <CAN_Filter_Config+0x40>
	{
		Error_handler();
 8005b88:	f000 f806 	bl	8005b98 <Error_handler>
	}

}
 8005b8c:	bf00      	nop
 8005b8e:	3728      	adds	r7, #40	; 0x28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	20004a20 	.word	0x20004a20

08005b98 <Error_handler>:

void Error_handler(void)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	af00      	add	r7, sp, #0
	while(1);
 8005b9c:	e7fe      	b.n	8005b9c <Error_handler+0x4>
	...

08005ba0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  {
	// Toggle LED for each transmit
	// HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	// Use LED for receiving correct byte
	if(dataFrameRx_01[0] == 0x50U && headerSTM32_MessageRx_01.StdId == 0x631U)
 8005ba8:	4b22      	ldr	r3, [pc, #136]	; (8005c34 <StartDefaultTask+0x94>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b50      	cmp	r3, #80	; 0x50
 8005bae:	d10b      	bne.n	8005bc8 <StartDefaultTask+0x28>
 8005bb0:	4b21      	ldr	r3, [pc, #132]	; (8005c38 <StartDefaultTask+0x98>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f240 6231 	movw	r2, #1585	; 0x631
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d105      	bne.n	8005bc8 <StartDefaultTask+0x28>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	2120      	movs	r1, #32
 8005bc0:	481e      	ldr	r0, [pc, #120]	; (8005c3c <StartDefaultTask+0x9c>)
 8005bc2:	f7fb fdc1 	bl	8001748 <HAL_GPIO_WritePin>
 8005bc6:	e004      	b.n	8005bd2 <StartDefaultTask+0x32>
	}
	else
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2120      	movs	r1, #32
 8005bcc:	481b      	ldr	r0, [pc, #108]	; (8005c3c <StartDefaultTask+0x9c>)
 8005bce:	f7fb fdbb 	bl	8001748 <HAL_GPIO_WritePin>
	}

	headerSTM32_MessageTx_01.IDE 	= CAN_ID_STD; // Standard identifier
 8005bd2:	4b1b      	ldr	r3, [pc, #108]	; (8005c40 <StartDefaultTask+0xa0>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	609a      	str	r2, [r3, #8]
	headerSTM32_MessageTx_01.StdId 	= 0x101U;
 8005bd8:	4b19      	ldr	r3, [pc, #100]	; (8005c40 <StartDefaultTask+0xa0>)
 8005bda:	f240 1201 	movw	r2, #257	; 0x101
 8005bde:	601a      	str	r2, [r3, #0]
	headerSTM32_MessageTx_01.RTR 	= CAN_RTR_DATA; // Data frame
 8005be0:	4b17      	ldr	r3, [pc, #92]	; (8005c40 <StartDefaultTask+0xa0>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	60da      	str	r2, [r3, #12]
	headerSTM32_MessageTx_01.DLC 	= 8;	// length of data
 8005be6:	4b16      	ldr	r3, [pc, #88]	; (8005c40 <StartDefaultTask+0xa0>)
 8005be8:	2208      	movs	r2, #8
 8005bea:	611a      	str	r2, [r3, #16]

	dataFrameTx_01[0] = 0x00U;
 8005bec:	4b15      	ldr	r3, [pc, #84]	; (8005c44 <StartDefaultTask+0xa4>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	701a      	strb	r2, [r3, #0]
	dataFrameTx_01[1] = 0x25U;
 8005bf2:	4b14      	ldr	r3, [pc, #80]	; (8005c44 <StartDefaultTask+0xa4>)
 8005bf4:	2225      	movs	r2, #37	; 0x25
 8005bf6:	705a      	strb	r2, [r3, #1]
	dataFrameTx_01[2] = 0x45U;
 8005bf8:	4b12      	ldr	r3, [pc, #72]	; (8005c44 <StartDefaultTask+0xa4>)
 8005bfa:	2245      	movs	r2, #69	; 0x45
 8005bfc:	709a      	strb	r2, [r3, #2]
	dataFrameTx_01[3] = 0x50U;
 8005bfe:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <StartDefaultTask+0xa4>)
 8005c00:	2250      	movs	r2, #80	; 0x50
 8005c02:	70da      	strb	r2, [r3, #3]
	dataFrameTx_01[4] = 0x99U;
 8005c04:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <StartDefaultTask+0xa4>)
 8005c06:	2299      	movs	r2, #153	; 0x99
 8005c08:	711a      	strb	r2, [r3, #4]
	dataFrameTx_01[5] = 0xAAU;
 8005c0a:	4b0e      	ldr	r3, [pc, #56]	; (8005c44 <StartDefaultTask+0xa4>)
 8005c0c:	22aa      	movs	r2, #170	; 0xaa
 8005c0e:	715a      	strb	r2, [r3, #5]
	dataFrameTx_01[6] = 0xBBU;
 8005c10:	4b0c      	ldr	r3, [pc, #48]	; (8005c44 <StartDefaultTask+0xa4>)
 8005c12:	22bb      	movs	r2, #187	; 0xbb
 8005c14:	719a      	strb	r2, [r3, #6]
	dataFrameTx_01[7] = 0xA0U;
 8005c16:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <StartDefaultTask+0xa4>)
 8005c18:	22a0      	movs	r2, #160	; 0xa0
 8005c1a:	71da      	strb	r2, [r3, #7]

	// Transmit CAN message
	HAL_CAN_AddTxMessage(&hcan1, &headerSTM32_MessageTx_01, dataFrameTx_01, &txMailbox);
 8005c1c:	4b0a      	ldr	r3, [pc, #40]	; (8005c48 <StartDefaultTask+0xa8>)
 8005c1e:	4a09      	ldr	r2, [pc, #36]	; (8005c44 <StartDefaultTask+0xa4>)
 8005c20:	4907      	ldr	r1, [pc, #28]	; (8005c40 <StartDefaultTask+0xa0>)
 8005c22:	480a      	ldr	r0, [pc, #40]	; (8005c4c <StartDefaultTask+0xac>)
 8005c24:	f7fa fed6 	bl	80009d4 <HAL_CAN_AddTxMessage>

    osDelay(1000);
 8005c28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c2c:	f7fd fa0c 	bl	8003048 <osDelay>
	if(dataFrameRx_01[0] == 0x50U && headerSTM32_MessageRx_01.StdId == 0x631U)
 8005c30:	e7ba      	b.n	8005ba8 <StartDefaultTask+0x8>
 8005c32:	bf00      	nop
 8005c34:	200049c0 	.word	0x200049c0
 8005c38:	200049a4 	.word	0x200049a4
 8005c3c:	40020000 	.word	0x40020000
 8005c40:	200049c8 	.word	0x200049c8
 8005c44:	20004a4c 	.word	0x20004a4c
 8005c48:	20004a48 	.word	0x20004a48
 8005c4c:	20004a20 	.word	0x20004a20

08005c50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a04      	ldr	r2, [pc, #16]	; (8005c70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d101      	bne.n	8005c66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005c62:	f7fa fc77 	bl	8000554 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005c66:	bf00      	nop
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	40010000 	.word	0x40010000

08005c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005c78:	bf00      	nop
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
	...

08005c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	607b      	str	r3, [r7, #4]
 8005c8e:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <HAL_MspInit+0x54>)
 8005c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c92:	4a11      	ldr	r2, [pc, #68]	; (8005cd8 <HAL_MspInit+0x54>)
 8005c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c98:	6453      	str	r3, [r2, #68]	; 0x44
 8005c9a:	4b0f      	ldr	r3, [pc, #60]	; (8005cd8 <HAL_MspInit+0x54>)
 8005c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ca2:	607b      	str	r3, [r7, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	603b      	str	r3, [r7, #0]
 8005caa:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <HAL_MspInit+0x54>)
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	4a0a      	ldr	r2, [pc, #40]	; (8005cd8 <HAL_MspInit+0x54>)
 8005cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8005cb6:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <HAL_MspInit+0x54>)
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cbe:	603b      	str	r3, [r7, #0]
 8005cc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	210f      	movs	r1, #15
 8005cc6:	f06f 0001 	mvn.w	r0, #1
 8005cca:	f7fb fb81 	bl	80013d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40023800 	.word	0x40023800

08005cdc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08a      	sub	sp, #40	; 0x28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ce4:	f107 0314 	add.w	r3, r7, #20
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	605a      	str	r2, [r3, #4]
 8005cee:	609a      	str	r2, [r3, #8]
 8005cf0:	60da      	str	r2, [r3, #12]
 8005cf2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a1d      	ldr	r2, [pc, #116]	; (8005d70 <HAL_CAN_MspInit+0x94>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d134      	bne.n	8005d68 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005cfe:	2300      	movs	r3, #0
 8005d00:	613b      	str	r3, [r7, #16]
 8005d02:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <HAL_CAN_MspInit+0x98>)
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	4a1b      	ldr	r2, [pc, #108]	; (8005d74 <HAL_CAN_MspInit+0x98>)
 8005d08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d0e:	4b19      	ldr	r3, [pc, #100]	; (8005d74 <HAL_CAN_MspInit+0x98>)
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d16:	613b      	str	r3, [r7, #16]
 8005d18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	4b15      	ldr	r3, [pc, #84]	; (8005d74 <HAL_CAN_MspInit+0x98>)
 8005d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d22:	4a14      	ldr	r2, [pc, #80]	; (8005d74 <HAL_CAN_MspInit+0x98>)
 8005d24:	f043 0301 	orr.w	r3, r3, #1
 8005d28:	6313      	str	r3, [r2, #48]	; 0x30
 8005d2a:	4b12      	ldr	r3, [pc, #72]	; (8005d74 <HAL_CAN_MspInit+0x98>)
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005d36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d44:	2303      	movs	r3, #3
 8005d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005d48:	2309      	movs	r3, #9
 8005d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d4c:	f107 0314 	add.w	r3, r7, #20
 8005d50:	4619      	mov	r1, r3
 8005d52:	4809      	ldr	r0, [pc, #36]	; (8005d78 <HAL_CAN_MspInit+0x9c>)
 8005d54:	f7fb fb66 	bl	8001424 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2105      	movs	r1, #5
 8005d5c:	2014      	movs	r0, #20
 8005d5e:	f7fb fb37 	bl	80013d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8005d62:	2014      	movs	r0, #20
 8005d64:	f7fb fb50 	bl	8001408 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8005d68:	bf00      	nop
 8005d6a:	3728      	adds	r7, #40	; 0x28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	40006400 	.word	0x40006400
 8005d74:	40023800 	.word	0x40023800
 8005d78:	40020000 	.word	0x40020000

08005d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08a      	sub	sp, #40	; 0x28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d84:	f107 0314 	add.w	r3, r7, #20
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	605a      	str	r2, [r3, #4]
 8005d8e:	609a      	str	r2, [r3, #8]
 8005d90:	60da      	str	r2, [r3, #12]
 8005d92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a19      	ldr	r2, [pc, #100]	; (8005e00 <HAL_UART_MspInit+0x84>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d12b      	bne.n	8005df6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005d9e:	2300      	movs	r3, #0
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	4b18      	ldr	r3, [pc, #96]	; (8005e04 <HAL_UART_MspInit+0x88>)
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	4a17      	ldr	r2, [pc, #92]	; (8005e04 <HAL_UART_MspInit+0x88>)
 8005da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dac:	6413      	str	r3, [r2, #64]	; 0x40
 8005dae:	4b15      	ldr	r3, [pc, #84]	; (8005e04 <HAL_UART_MspInit+0x88>)
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db6:	613b      	str	r3, [r7, #16]
 8005db8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <HAL_UART_MspInit+0x88>)
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc2:	4a10      	ldr	r2, [pc, #64]	; (8005e04 <HAL_UART_MspInit+0x88>)
 8005dc4:	f043 0301 	orr.w	r3, r3, #1
 8005dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8005dca:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <HAL_UART_MspInit+0x88>)
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005dd6:	230c      	movs	r3, #12
 8005dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dda:	2302      	movs	r3, #2
 8005ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dde:	2300      	movs	r3, #0
 8005de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005de2:	2303      	movs	r3, #3
 8005de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005de6:	2307      	movs	r3, #7
 8005de8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dea:	f107 0314 	add.w	r3, r7, #20
 8005dee:	4619      	mov	r1, r3
 8005df0:	4805      	ldr	r0, [pc, #20]	; (8005e08 <HAL_UART_MspInit+0x8c>)
 8005df2:	f7fb fb17 	bl	8001424 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005df6:	bf00      	nop
 8005df8:	3728      	adds	r7, #40	; 0x28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40004400 	.word	0x40004400
 8005e04:	40023800 	.word	0x40023800
 8005e08:	40020000 	.word	0x40020000

08005e0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08c      	sub	sp, #48	; 0x30
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	6879      	ldr	r1, [r7, #4]
 8005e20:	2019      	movs	r0, #25
 8005e22:	f7fb fad5 	bl	80013d0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8005e26:	2019      	movs	r0, #25
 8005e28:	f7fb faee 	bl	8001408 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	4b1e      	ldr	r3, [pc, #120]	; (8005eac <HAL_InitTick+0xa0>)
 8005e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e34:	4a1d      	ldr	r2, [pc, #116]	; (8005eac <HAL_InitTick+0xa0>)
 8005e36:	f043 0301 	orr.w	r3, r3, #1
 8005e3a:	6453      	str	r3, [r2, #68]	; 0x44
 8005e3c:	4b1b      	ldr	r3, [pc, #108]	; (8005eac <HAL_InitTick+0xa0>)
 8005e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005e48:	f107 0210 	add.w	r2, r7, #16
 8005e4c:	f107 0314 	add.w	r3, r7, #20
 8005e50:	4611      	mov	r1, r2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fb fdac 	bl	80019b0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005e58:	f7fb fd96 	bl	8001988 <HAL_RCC_GetPCLK2Freq>
 8005e5c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e60:	4a13      	ldr	r2, [pc, #76]	; (8005eb0 <HAL_InitTick+0xa4>)
 8005e62:	fba2 2303 	umull	r2, r3, r2, r3
 8005e66:	0c9b      	lsrs	r3, r3, #18
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005e6c:	4b11      	ldr	r3, [pc, #68]	; (8005eb4 <HAL_InitTick+0xa8>)
 8005e6e:	4a12      	ldr	r2, [pc, #72]	; (8005eb8 <HAL_InitTick+0xac>)
 8005e70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8005e72:	4b10      	ldr	r3, [pc, #64]	; (8005eb4 <HAL_InitTick+0xa8>)
 8005e74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005e78:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005e7a:	4a0e      	ldr	r2, [pc, #56]	; (8005eb4 <HAL_InitTick+0xa8>)
 8005e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005e80:	4b0c      	ldr	r3, [pc, #48]	; (8005eb4 <HAL_InitTick+0xa8>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e86:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <HAL_InitTick+0xa8>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005e8c:	4809      	ldr	r0, [pc, #36]	; (8005eb4 <HAL_InitTick+0xa8>)
 8005e8e:	f7fc f9bb 	bl	8002208 <HAL_TIM_Base_Init>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d104      	bne.n	8005ea2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005e98:	4806      	ldr	r0, [pc, #24]	; (8005eb4 <HAL_InitTick+0xa8>)
 8005e9a:	f7fc f9ea 	bl	8002272 <HAL_TIM_Base_Start_IT>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	e000      	b.n	8005ea4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3730      	adds	r7, #48	; 0x30
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40023800 	.word	0x40023800
 8005eb0:	431bde83 	.word	0x431bde83
 8005eb4:	20004a54 	.word	0x20004a54
 8005eb8:	40010000 	.word	0x40010000

08005ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005ec0:	bf00      	nop
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ece:	e7fe      	b.n	8005ece <HardFault_Handler+0x4>

08005ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ed4:	e7fe      	b.n	8005ed4 <MemManage_Handler+0x4>

08005ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005eda:	e7fe      	b.n	8005eda <BusFault_Handler+0x4>

08005edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ee0:	e7fe      	b.n	8005ee0 <UsageFault_Handler+0x4>

08005ee2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ee6:	bf00      	nop
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005ef4:	4805      	ldr	r0, [pc, #20]	; (8005f0c <CAN1_RX0_IRQHandler+0x1c>)
 8005ef6:	f7fa ff80 	bl	8000dfa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &headerSTM32_MessageRx_01, dataFrameRx_01);
 8005efa:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <CAN1_RX0_IRQHandler+0x20>)
 8005efc:	4a05      	ldr	r2, [pc, #20]	; (8005f14 <CAN1_RX0_IRQHandler+0x24>)
 8005efe:	2100      	movs	r1, #0
 8005f00:	4802      	ldr	r0, [pc, #8]	; (8005f0c <CAN1_RX0_IRQHandler+0x1c>)
 8005f02:	f7fa fe42 	bl	8000b8a <HAL_CAN_GetRxMessage>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8005f06:	bf00      	nop
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	20004a20 	.word	0x20004a20
 8005f10:	200049c0 	.word	0x200049c0
 8005f14:	200049a4 	.word	0x200049a4

08005f18 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005f1c:	4802      	ldr	r0, [pc, #8]	; (8005f28 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005f1e:	f7fc f9cc 	bl	80022ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005f22:	bf00      	nop
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20004a54 	.word	0x20004a54

08005f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005f30:	4b08      	ldr	r3, [pc, #32]	; (8005f54 <SystemInit+0x28>)
 8005f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f36:	4a07      	ldr	r2, [pc, #28]	; (8005f54 <SystemInit+0x28>)
 8005f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005f40:	4b04      	ldr	r3, [pc, #16]	; (8005f54 <SystemInit+0x28>)
 8005f42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005f46:	609a      	str	r2, [r3, #8]
#endif
}
 8005f48:	bf00      	nop
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	e000ed00 	.word	0xe000ed00

08005f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005f5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005f5e:	e003      	b.n	8005f68 <LoopCopyDataInit>

08005f60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005f60:	4b0c      	ldr	r3, [pc, #48]	; (8005f94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005f62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005f64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005f66:	3104      	adds	r1, #4

08005f68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005f68:	480b      	ldr	r0, [pc, #44]	; (8005f98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005f6a:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005f6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005f6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005f70:	d3f6      	bcc.n	8005f60 <CopyDataInit>
  ldr  r2, =_sbss
 8005f72:	4a0b      	ldr	r2, [pc, #44]	; (8005fa0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005f74:	e002      	b.n	8005f7c <LoopFillZerobss>

08005f76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005f76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005f78:	f842 3b04 	str.w	r3, [r2], #4

08005f7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005f7c:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005f7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005f80:	d3f9      	bcc.n	8005f76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005f82:	f7ff ffd3 	bl	8005f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f86:	f000 f811 	bl	8005fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f8a:	f7ff fc87 	bl	800589c <main>
  bx  lr    
 8005f8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005f90:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005f94:	080060a4 	.word	0x080060a4
  ldr  r0, =_sdata
 8005f98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005f9c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8005fa0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8005fa4:	20004a94 	.word	0x20004a94

08005fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005fa8:	e7fe      	b.n	8005fa8 <ADC_IRQHandler>
	...

08005fac <__libc_init_array>:
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	4e0d      	ldr	r6, [pc, #52]	; (8005fe4 <__libc_init_array+0x38>)
 8005fb0:	4c0d      	ldr	r4, [pc, #52]	; (8005fe8 <__libc_init_array+0x3c>)
 8005fb2:	1ba4      	subs	r4, r4, r6
 8005fb4:	10a4      	asrs	r4, r4, #2
 8005fb6:	2500      	movs	r5, #0
 8005fb8:	42a5      	cmp	r5, r4
 8005fba:	d109      	bne.n	8005fd0 <__libc_init_array+0x24>
 8005fbc:	4e0b      	ldr	r6, [pc, #44]	; (8005fec <__libc_init_array+0x40>)
 8005fbe:	4c0c      	ldr	r4, [pc, #48]	; (8005ff0 <__libc_init_array+0x44>)
 8005fc0:	f000 f82c 	bl	800601c <_init>
 8005fc4:	1ba4      	subs	r4, r4, r6
 8005fc6:	10a4      	asrs	r4, r4, #2
 8005fc8:	2500      	movs	r5, #0
 8005fca:	42a5      	cmp	r5, r4
 8005fcc:	d105      	bne.n	8005fda <__libc_init_array+0x2e>
 8005fce:	bd70      	pop	{r4, r5, r6, pc}
 8005fd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fd4:	4798      	blx	r3
 8005fd6:	3501      	adds	r5, #1
 8005fd8:	e7ee      	b.n	8005fb8 <__libc_init_array+0xc>
 8005fda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fde:	4798      	blx	r3
 8005fe0:	3501      	adds	r5, #1
 8005fe2:	e7f2      	b.n	8005fca <__libc_init_array+0x1e>
 8005fe4:	0800609c 	.word	0x0800609c
 8005fe8:	0800609c 	.word	0x0800609c
 8005fec:	0800609c 	.word	0x0800609c
 8005ff0:	080060a0 	.word	0x080060a0

08005ff4 <memcpy>:
 8005ff4:	b510      	push	{r4, lr}
 8005ff6:	1e43      	subs	r3, r0, #1
 8005ff8:	440a      	add	r2, r1
 8005ffa:	4291      	cmp	r1, r2
 8005ffc:	d100      	bne.n	8006000 <memcpy+0xc>
 8005ffe:	bd10      	pop	{r4, pc}
 8006000:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006004:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006008:	e7f7      	b.n	8005ffa <memcpy+0x6>

0800600a <memset>:
 800600a:	4402      	add	r2, r0
 800600c:	4603      	mov	r3, r0
 800600e:	4293      	cmp	r3, r2
 8006010:	d100      	bne.n	8006014 <memset+0xa>
 8006012:	4770      	bx	lr
 8006014:	f803 1b01 	strb.w	r1, [r3], #1
 8006018:	e7f9      	b.n	800600e <memset+0x4>
	...

0800601c <_init>:
 800601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601e:	bf00      	nop
 8006020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006022:	bc08      	pop	{r3}
 8006024:	469e      	mov	lr, r3
 8006026:	4770      	bx	lr

08006028 <_fini>:
 8006028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602a:	bf00      	nop
 800602c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602e:	bc08      	pop	{r3}
 8006030:	469e      	mov	lr, r3
 8006032:	4770      	bx	lr
